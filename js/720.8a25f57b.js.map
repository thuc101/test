{"version":3,"file":"js/720.8a25f57b.js","mappings":"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","sources":["webpack://hello-world/./src/views/Konva/TplCtrlV1.vue","webpack://hello-world/src/views/Konva/TplCtrlV1.vue","webpack://hello-world/./src/views/Konva/TplCtrlV1.vue?922a","webpack://hello-world/./src/views/Konva/TplCtrlV1.vue?b732","webpack://hello-world/./src/views/Konva/TplCtrlV1.vue?71dc"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('raw-loader',{attrs:{\"mytxt\":require('!raw-loader!./TplCtrlV1.vue').default}}),_c('h1',{staticClass:\"border-bottom\"},[_vm._v(\"KonvaTpl2\")]),_vm._v(\" \"+_vm._s(_vm.msg)+\" \"),_c('b-row',[_c('b-col',{attrs:{\"lg\":\"4\"}},[_c('div',{attrs:{\"id\":\"stage-parent\"}},[_c('div',{staticClass:\"border\",attrs:{\"id\":\"container\"}},[_c('v-stage',{ref:\"stage\",attrs:{\"config\":_vm.configKonva},on:{\"click\":_vm.onStageClick,\"mousemove\":_vm.onStageMouseMove,\"mouseenter\":_vm.onStageMouseenter,\"mouseleave\":_vm.onStageMouseleave}},[_c('v-layer',{ref:\"layer\"},[_c('v-image',{ref:\"img\",attrs:{\"config\":{\n                                x: 0,\n                                y: 0,\n                                image: _vm.image,\n                                width: 1500,\n                                height: 1000,\n                                rotation: 0,\n                                draggable: true\n                            }}}),_vm._l((_vm.items),function(x,k){return _c('v-rect',{key:k,attrs:{\"config\":x},on:{\"dragstart\":_vm.handleDragstart,\"dragend\":_vm.handleDragend}})})],2)],1)],1)]),_c('button',{staticClass:\"mt-1\",on:{\"click\":_vm.onSave}},[_vm._v(\"Save\")])]),_c('b-col',{attrs:{\"lg\":\"8\"}},[_vm._v(\" right \")])],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div>\r\n        <raw-loader :mytxt=\"require('!raw-loader!./TplCtrlV1.vue').default\"></raw-loader>\r\n        <h1 class=\"border-bottom\">KonvaTpl2</h1>\r\n        {{ msg }}\r\n        <b-row>\r\n            <b-col lg=\"4\">\r\n                <div id=\"stage-parent\">\r\n                    <div id=\"container\" class=\"border\">\r\n                        <v-stage ref=\"stage\" @click=\"onStageClick\" @mousemove=\"onStageMouseMove\"\r\n                            @mouseenter=\"onStageMouseenter\" @mouseleave=\"onStageMouseleave\" :config=\"configKonva\">\r\n                            <v-layer ref=\"layer\">\r\n\r\n                                <v-image ref=\"img\" :config=\"{\r\n                                    x: 0,\r\n                                    y: 0,\r\n                                    image: image,\r\n                                    width: 1500,\r\n                                    height: 1000,\r\n                                    rotation: 0,\r\n                                    draggable: true\r\n                                }\" />\r\n\r\n\r\n                                <v-rect v-for=\"(x, k) in items\" :key=\"k\" :config=\"x\" @dragstart=\"handleDragstart\"\r\n                                    @dragend=\"handleDragend\" />\r\n                            </v-layer>\r\n                        </v-stage>\r\n                    </div>\r\n                </div>\r\n                <button class=\"mt-1\" @click=\"onSave\">Save</button>\r\n            </b-col>\r\n            <b-col lg=\"8\">\r\n                right\r\n            </b-col>\r\n        </b-row>\r\n    </div>\r\n</template>\r\n<script>\r\nvar sceneWidth = 1500;\r\nvar sceneHeight = 1000;\r\nvar stage = null;\r\nvar layer = null;\r\nfunction generateItems() {\r\n    let w = 200;\r\n    let h = 200;\r\n    let width = sceneWidth - w;\r\n    let height = sceneHeight - h;\r\n    const items = [];\r\n    for (let i = 0; i < 10; i++) {\r\n        items.push({\r\n            x: Math.random() * width,\r\n            y: Math.random() * height,\r\n            radius: 50,\r\n            id: \"node-\" + i,\r\n            width: w,\r\n            height: h,\r\n            fill: Konva.Util.getRandomColor(),\r\n            stroke: 'black', //Konva.Util.getRandomColor(),\r\n            draggable: true,\r\n            strokeWidth: 4,\r\n        });\r\n    }\r\n    return items;\r\n}\r\nexport default {\r\n    data() {\r\n        return {\r\n            configKonva: {\r\n                width: sceneWidth,\r\n                height: sceneHeight\r\n            },\r\n            items: [],\r\n            msg: '',\r\n            image: null\r\n        }\r\n    },\r\n    mounted() {\r\n        this.items = generateItems();\r\n        this.$nextTick(function () {\r\n            layer = this.$refs.layer.getNode();\r\n            stage = this.$refs.stage.getNode();\r\n            window.addEventListener(\"resize\", this.fitStageIntoParentContainer);\r\n            this.fitStageIntoParentContainer();\r\n        })\r\n\r\n        document.addEventListener('paste', this.onPasteEvent)\r\n\r\n\r\n    },\r\n    methods: {\r\n\r\n        onPasteEvent(pasteEvent) {\r\n            var item = pasteEvent.clipboardData.items[0];\r\n            let that = this;\r\n            if (item.type.indexOf(\"image\") === 0) {\r\n                var blob = item.getAsFile();\r\n                var reader = new FileReader();\r\n                reader.onload = function (event) {\r\n                    document.getElementById(\"container\").src = event.target.result;\r\n                    let dataBase64=event.target.result;\r\n                    //alert(dataBase64);\r\n                    that.loadImage(dataBase64).then(res=>{\r\n                        that.image=res;\r\n                    })\r\n                };\r\n                reader.readAsDataURL(blob);\r\n            }\r\n        },\r\n\r\n        loadImage(dataBase64) {\r\n            return new Promise((resolve, reject) => {\r\n                let image = new Image()\r\n                image.onload = () => resolve(image)\r\n                const msg = `Could not load image at ${dataBase64}`\r\n                image.onerror = () => reject(new Error(msg))\r\n                image.src = dataBase64\r\n            })\r\n        },\r\n\r\n\r\n\r\n        onSave() {\r\n            let stage = this.$refs.stage.getNode();\r\n            var dataURL = stage.toDataURL({ pixelRatio: 0.5 });\r\n            alert(dataURL);\r\n        },\r\n        handleDragstart(e) {\r\n            e.target.moveToTop();\r\n        },\r\n        handleDragend(e) {\r\n            e.target.fill('yellow');\r\n        },\r\n        onStageClick(e) {\r\n            let p1 = this.myGetMouse();\r\n            this.msg = `mouse click ${JSON.stringify(p1)}`;\r\n        },\r\n        onStageMouseMove(e) {\r\n            let p = this.myGetMouse();\r\n        },\r\n        onStageMouseenter(e) {\r\n        },\r\n        onStageMouseleave(e) {\r\n        },\r\n        myGetMouse() {\r\n            let scale = stage.scale().x;\r\n            var mousePos = stage.getPointerPosition();\r\n            var x = mousePos.x;\r\n            var y = mousePos.y;\r\n            var xx = Math.round(x / scale);\r\n            var yy = Math.round(y / scale);\r\n            return { x: xx, y: yy };\r\n        },\r\n        fitStageIntoParentContainer() {\r\n            var container = document.querySelector('#stage-parent');\r\n            var containerWidth = container.offsetWidth;\r\n            var scale = containerWidth / sceneWidth;\r\n            stage.width(sceneWidth * scale);\r\n            stage.height(sceneHeight * scale);\r\n            stage.scale({ x: scale, y: scale });\r\n            this.configKonva.width = sceneWidth * scale;\r\n            this.configKonva.height = sceneHeight * scale;\r\n        },\r\n    }\r\n}\r\n</script>\r\n  ","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./TplCtrlV1.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./TplCtrlV1.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./TplCtrlV1.vue?vue&type=template&id=6e1afde5&\"\nimport script from \"./TplCtrlV1.vue?vue&type=script&lang=js&\"\nexport * from \"./TplCtrlV1.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export default \"<template>\\r\\n    <div>\\r\\n        <raw-loader :mytxt=\\\"require('!raw-loader!./TplCtrlV1.vue').default\\\"></raw-loader>\\r\\n        <h1 class=\\\"border-bottom\\\">KonvaTpl2</h1>\\r\\n        {{ msg }}\\r\\n        <b-row>\\r\\n            <b-col lg=\\\"4\\\">\\r\\n                <div id=\\\"stage-parent\\\">\\r\\n                    <div id=\\\"container\\\" class=\\\"border\\\">\\r\\n                        <v-stage ref=\\\"stage\\\" @click=\\\"onStageClick\\\" @mousemove=\\\"onStageMouseMove\\\"\\r\\n                            @mouseenter=\\\"onStageMouseenter\\\" @mouseleave=\\\"onStageMouseleave\\\" :config=\\\"configKonva\\\">\\r\\n                            <v-layer ref=\\\"layer\\\">\\r\\n\\r\\n                                <v-image ref=\\\"img\\\" :config=\\\"{\\r\\n                                    x: 0,\\r\\n                                    y: 0,\\r\\n                                    image: image,\\r\\n                                    width: 1500,\\r\\n                                    height: 1000,\\r\\n                                    rotation: 0,\\r\\n                                    draggable: true\\r\\n                                }\\\" />\\r\\n\\r\\n\\r\\n                                <v-rect v-for=\\\"(x, k) in items\\\" :key=\\\"k\\\" :config=\\\"x\\\" @dragstart=\\\"handleDragstart\\\"\\r\\n                                    @dragend=\\\"handleDragend\\\" />\\r\\n                            </v-layer>\\r\\n                        </v-stage>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <button class=\\\"mt-1\\\" @click=\\\"onSave\\\">Save</button>\\r\\n            </b-col>\\r\\n            <b-col lg=\\\"8\\\">\\r\\n                right\\r\\n            </b-col>\\r\\n        </b-row>\\r\\n    </div>\\r\\n</template>\\r\\n<script>\\r\\nvar sceneWidth = 1500;\\r\\nvar sceneHeight = 1000;\\r\\nvar stage = null;\\r\\nvar layer = null;\\r\\nfunction generateItems() {\\r\\n    let w = 200;\\r\\n    let h = 200;\\r\\n    let width = sceneWidth - w;\\r\\n    let height = sceneHeight - h;\\r\\n    const items = [];\\r\\n    for (let i = 0; i < 10; i++) {\\r\\n        items.push({\\r\\n            x: Math.random() * width,\\r\\n            y: Math.random() * height,\\r\\n            radius: 50,\\r\\n            id: \\\"node-\\\" + i,\\r\\n            width: w,\\r\\n            height: h,\\r\\n            fill: Konva.Util.getRandomColor(),\\r\\n            stroke: 'black', //Konva.Util.getRandomColor(),\\r\\n            draggable: true,\\r\\n            strokeWidth: 4,\\r\\n        });\\r\\n    }\\r\\n    return items;\\r\\n}\\r\\nexport default {\\r\\n    data() {\\r\\n        return {\\r\\n            configKonva: {\\r\\n                width: sceneWidth,\\r\\n                height: sceneHeight\\r\\n            },\\r\\n            items: [],\\r\\n            msg: '',\\r\\n            image: null\\r\\n        }\\r\\n    },\\r\\n    mounted() {\\r\\n        this.items = generateItems();\\r\\n        this.$nextTick(function () {\\r\\n            layer = this.$refs.layer.getNode();\\r\\n            stage = this.$refs.stage.getNode();\\r\\n            window.addEventListener(\\\"resize\\\", this.fitStageIntoParentContainer);\\r\\n            this.fitStageIntoParentContainer();\\r\\n        })\\r\\n\\r\\n        document.addEventListener('paste', this.onPasteEvent)\\r\\n\\r\\n\\r\\n    },\\r\\n    methods: {\\r\\n\\r\\n        onPasteEvent(pasteEvent) {\\r\\n            var item = pasteEvent.clipboardData.items[0];\\r\\n            let that = this;\\r\\n            if (item.type.indexOf(\\\"image\\\") === 0) {\\r\\n                var blob = item.getAsFile();\\r\\n                var reader = new FileReader();\\r\\n                reader.onload = function (event) {\\r\\n                    document.getElementById(\\\"container\\\").src = event.target.result;\\r\\n                    let dataBase64=event.target.result;\\r\\n                    //alert(dataBase64);\\r\\n                    that.loadImage(dataBase64).then(res=>{\\r\\n                        that.image=res;\\r\\n                    })\\r\\n                };\\r\\n                reader.readAsDataURL(blob);\\r\\n            }\\r\\n        },\\r\\n\\r\\n        loadImage(dataBase64) {\\r\\n            return new Promise((resolve, reject) => {\\r\\n                let image = new Image()\\r\\n                image.onload = () => resolve(image)\\r\\n                const msg = `Could not load image at ${dataBase64}`\\r\\n                image.onerror = () => reject(new Error(msg))\\r\\n                image.src = dataBase64\\r\\n            })\\r\\n        },\\r\\n\\r\\n\\r\\n\\r\\n        onSave() {\\r\\n            let stage = this.$refs.stage.getNode();\\r\\n            var dataURL = stage.toDataURL({ pixelRatio: 0.5 });\\r\\n            alert(dataURL);\\r\\n        },\\r\\n        handleDragstart(e) {\\r\\n            e.target.moveToTop();\\r\\n        },\\r\\n        handleDragend(e) {\\r\\n            e.target.fill('yellow');\\r\\n        },\\r\\n        onStageClick(e) {\\r\\n            let p1 = this.myGetMouse();\\r\\n            this.msg = `mouse click ${JSON.stringify(p1)}`;\\r\\n        },\\r\\n        onStageMouseMove(e) {\\r\\n            let p = this.myGetMouse();\\r\\n        },\\r\\n        onStageMouseenter(e) {\\r\\n        },\\r\\n        onStageMouseleave(e) {\\r\\n        },\\r\\n        myGetMouse() {\\r\\n            let scale = stage.scale().x;\\r\\n            var mousePos = stage.getPointerPosition();\\r\\n            var x = mousePos.x;\\r\\n            var y = mousePos.y;\\r\\n            var xx = Math.round(x / scale);\\r\\n            var yy = Math.round(y / scale);\\r\\n            return { x: xx, y: yy };\\r\\n        },\\r\\n        fitStageIntoParentContainer() {\\r\\n            var container = document.querySelector('#stage-parent');\\r\\n            var containerWidth = container.offsetWidth;\\r\\n            var scale = containerWidth / sceneWidth;\\r\\n            stage.width(sceneWidth * scale);\\r\\n            stage.height(sceneHeight * scale);\\r\\n            stage.scale({ x: scale, y: scale });\\r\\n            this.configKonva.width = sceneWidth * scale;\\r\\n            this.configKonva.height = sceneHeight * scale;\\r\\n        },\\r\\n    }\\r\\n}\\r\\n</script>\\r\\n  \";"],"names":["render","_vm","this","_c","_self","attrs","require","staticClass","_v","_s","msg","ref","configKonva","on","onStageClick","onStageMouseMove","onStageMouseenter","onStageMouseleave","x","y","image","width","height","rotation","draggable","_l","items","k","key","handleDragstart","handleDragend","onSave","staticRenderFns","sceneWidth","sceneHeight","stage","generateItems","radius","id","fill","stroke","strokeWidth","data","mounted","layer","window","document","methods","onPasteEvent","reader","that","loadImage","pixelRatio","alert","e","myGetMouse","fitStageIntoParentContainer","component"],"sourceRoot":""}