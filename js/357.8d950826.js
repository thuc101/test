"use strict";(self["webpackChunkhello_world"]=self["webpackChunkhello_world"]||[]).push([[357],{98357:function(e,t,r){r.r(t),r.d(t,{default:function(){return u}});var n=function(){var e=this,t=e._self._c;return t("div",[t("raw-loader",{attrs:{mytxt:r(32952).Z}}),t("h1",{staticClass:"border-bottom"},[e._v("KonvaTpl2")]),t("b-row",[t("b-col",{attrs:{lg:"4"}},[t("div",{attrs:{id:"stage-parent"}},[t("div",{staticClass:"border",attrs:{id:"container"}},[t("v-stage",{ref:"stage",attrs:{config:e.configKonva},on:{click:e.onStageClick,mousemove:e.onStageMouseMove,mouseenter:e.onStageMouseenter,mouseleave:e.onStageMouseleave}},[t("v-layer",{ref:"layer"},[e._l(e.items,(function(r,n){return t("v-rect",{key:n,attrs:{config:r},on:{dragstart:e.handleDragstart,dragend:e.handleDragend}})})),t("v-rect",{ref:"rect"})],2)],1)],1)]),e._v(" "+e._s(e.msg)),t("br"),t("button",{staticClass:"mt-1",on:{click:e.onSave}},[e._v("Save")]),t("button",{staticClass:"mt-1",on:{click:e.onTest}},[e._v("Test")])]),t("b-col",{attrs:{lg:"8"}},[e._v(" right ")])],1)],1)},a=[],o=(r(57658),1500),s=1e3,i=null;function l(){let e=200,t=200,r=o-e,n=s-t;const a=[];for(let o=0;o<2;o++)a.push({x:Math.random()*r,y:Math.random()*n,radius:50,id:"node-"+o,width:e,height:t,fill:Konva.Util.getRandomColor(),stroke:"black",draggable:!0,strokeWidth:4});return a}var h={data(){return{configKonva:{width:o,height:s},items:[],msg:"",sel:null}},mounted(){this.items=l(),this.$nextTick((function(){this.$refs.layer.getNode(),i=this.$refs.stage.getNode(),window.addEventListener("resize",this.fitStageIntoParentContainer),this.fitStageIntoParentContainer()}));let e=this.$refs.rect.getNode();e.x(10),e.y(10),e.width(100),e.height(100),e.fill("red")},methods:{onTest(){let e=this.$refs.layer.getNode(),t=e.getChildren();t.forEach((e=>{let t={x:Math.round(e.x()),y:Math.round(e.y()),w:Math.round(e.width()),h:Math.round(e.height())};console.log(JSON.stringify(t))}))},onSave(){let e=this.$refs.stage.getNode();var t=e.toDataURL({pixelRatio:.5});alert(t)},handleDragstart(e){},handleDragend(e){e.target.fill("yellow")},onStageClick(e){let t=this.myGetMouse();this.msg=`mouse click ${JSON.stringify(t)}`},onStageMouseMove(e){this.myGetMouse();let t=this.items[0];this.msg=JSON.stringify(t)},onStageMouseenter(e){let t=this.$refs.rect.getNode();t.moveToTop()},onStageMouseleave(e){},myGetMouse(){let e=i.scale().x;var t=i.getPointerPosition(),r=t.x,n=t.y,a=Math.round(r/e),o=Math.round(n/e);return{x:a,y:o}},fitStageIntoParentContainer(){var e=document.querySelector("#stage-parent"),t=e.offsetWidth,r=t/o;i.width(o*r),i.height(s*r),i.scale({x:r,y:r}),this.configKonva.width=o*r,this.configKonva.height=s*r}}},d=h,c=r(1001),g=(0,c.Z)(d,n,a,!1,null,null,null),u=g.exports},32952:function(e,t){t["Z"]='<template>\r\n    <div>\r\n        <raw-loader :mytxt="require(\'!raw-loader!./TplRect.vue\').default"></raw-loader>\r\n        <h1 class="border-bottom">KonvaTpl2</h1>\r\n        <b-row>\r\n            <b-col lg="4">\r\n                <div id="stage-parent">\r\n                    <div id="container" class="border">\r\n                        <v-stage ref="stage" @click="onStageClick" @mousemove="onStageMouseMove"\r\n                            @mouseenter="onStageMouseenter" @mouseleave="onStageMouseleave" :config="configKonva">\r\n                            <v-layer ref="layer">\r\n                                <v-rect v-for="(x, k) in items" :key="k" :config="x" @dragstart="handleDragstart"\r\n                                    @dragend="handleDragend" />\r\n                                <v-rect ref="rect"></v-rect>\r\n\r\n\r\n                            </v-layer>\r\n                        </v-stage>\r\n                    </div>\r\n                </div>\r\n                {{ msg }}<br>\r\n                <button class="mt-1" @click="onSave">Save</button>\r\n                <button class="mt-1" @click="onTest">Test</button>\r\n            </b-col>\r\n            <b-col lg="8">\r\n                right\r\n            </b-col>\r\n        </b-row>\r\n    </div>\r\n</template>\r\n<script>\r\nvar sceneWidth = 1500;\r\nvar sceneHeight = 1000;\r\nvar stage = null;\r\nvar layer = null;\r\nfunction generateItems() {\r\n    let w=200;\r\n    let h=200;\r\n    let width = sceneWidth - w;\r\n    let height = sceneHeight - h;\r\n    const items = [];\r\n    for (let i = 0; i < 2; i++) {\r\n        items.push({\r\n            x: Math.random() * width,\r\n            y: Math.random() * height,\r\n            radius: 50,\r\n            id: "node-" + i,\r\n            width: w,\r\n            height: h,\r\n            fill: Konva.Util.getRandomColor(),\r\n            stroke: \'black\', //Konva.Util.getRandomColor(),\r\n            draggable: true,\r\n            strokeWidth: 4,\r\n        });\r\n    }\r\n    return items;\r\n}\r\nexport default {\r\n    data() {\r\n        return {\r\n            configKonva: {\r\n                width: sceneWidth,\r\n                height: sceneHeight\r\n            },\r\n            items: [],\r\n            msg: \'\',\r\n            sel:null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.items = generateItems();\r\n        this.$nextTick(function () {\r\n            layer = this.$refs.layer.getNode();\r\n            stage = this.$refs.stage.getNode();\r\n            window.addEventListener("resize", this.fitStageIntoParentContainer);\r\n            this.fitStageIntoParentContainer();\r\n        })\r\n        let rect=this.$refs.rect.getNode();\r\n        rect.x(10);\r\n        rect.y(10);\r\n        rect.width(100);\r\n        rect.height(100);\r\n        rect.fill(\'red\');\r\n        //e.target.moveToTop();\r\n    },\r\n    methods: {\r\n        onTest(){\r\n            let layer=this.$refs.layer.getNode();\r\n            let children=layer.getChildren();\r\n            children.forEach(x=>{\r\n                let r={\r\n                    x: Math.round (x.x()),\r\n                    y: Math.round (x.y()),\r\n                    w: Math.round (x.width()),\r\n                    h: Math.round (x.height())\r\n                }\r\n                console.log(JSON.stringify(r));\r\n            })\r\n            //alert(children.length);\r\n            //alert(\'test\');\r\n            /*\r\n\r\nconst childrenToDestroy = this.layer.getChildren().filter(child => shouldDelete(child));\r\nchildrenToDestroy.forEach(child => child.destroy());\r\n\r\n            // get all children\r\n            var children = layer.getChildren();\r\n\r\n            // get only circles\r\n            var circles = layer.getChildren(function(node){\r\n            return node.getClassName() === \'Circle\';\r\n            });\r\n\r\n                this.layer.getChildren().each((child) => {\r\n                if (shouldDelete(child)) {\r\n                    child.destroy();\r\n                }\r\n                });\r\n                this.layer.draw();            \r\n            */            \r\n        },\r\n        onSave() {\r\n            let stage = this.$refs.stage.getNode();\r\n            var dataURL = stage.toDataURL({ pixelRatio: 0.5 });\r\n            alert(dataURL);\r\n        },\r\n        handleDragstart(e) {\r\n            //e.target.moveToTop();\r\n            // this.sel=e.target;\r\n            // console.log(JSON.stringify({\r\n            //     x:this.sel.x(),\r\n            //     y:this.sel.y(),\r\n            //     w:this.sel.width(),\r\n            //     h:this.sel.height()\r\n            // }));\r\n        },\r\n        handleDragend(e) {\r\n            e.target.fill(\'yellow\');\r\n        },\r\n        onStageClick(e) {\r\n            let p1 = this.myGetMouse();\r\n            this.msg = `mouse click ${JSON.stringify(p1)}`;\r\n        },\r\n        onStageMouseMove(e) {\r\n            let p = this.myGetMouse();\r\n            //console.log(this.items[0]);\r\n            let r=this.items[0];\r\n            this.msg=JSON.stringify(r);\r\n\r\n        },\r\n        onStageMouseenter(e) {\r\n            let rect=this.$refs.rect.getNode();\r\n            rect.moveToTop();\r\n        },\r\n        onStageMouseleave(e) {\r\n        },\r\n        myGetMouse() {\r\n            let scale = stage.scale().x;\r\n            var mousePos = stage.getPointerPosition();\r\n            var x = mousePos.x;\r\n            var y = mousePos.y;\r\n            var xx = Math.round(x / scale);\r\n            var yy = Math.round(y / scale);\r\n            return { x: xx, y: yy };\r\n        },\r\n        fitStageIntoParentContainer() {\r\n            var container = document.querySelector(\'#stage-parent\');\r\n            var containerWidth = container.offsetWidth;\r\n            var scale = containerWidth / sceneWidth;\r\n            stage.width(sceneWidth * scale);\r\n            stage.height(sceneHeight * scale);\r\n            stage.scale({ x: scale, y: scale });\r\n            this.configKonva.width = sceneWidth * scale;\r\n            this.configKonva.height = sceneHeight * scale;\r\n        },\r\n    }\r\n}\r\n<\/script>\r\n  '}}]);
//# sourceMappingURL=357.8d950826.js.map