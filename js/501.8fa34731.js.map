{"version":3,"file":"js/501.8fa34731.js","mappings":"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","sources":["webpack://hello-world/./src/views/Konva/Tpl2Save.vue","webpack://hello-world/src/views/Konva/Tpl2Save.vue","webpack://hello-world/./src/views/Konva/Tpl2Save.vue?6f52","webpack://hello-world/./src/views/Konva/Tpl2Save.vue?85b0","webpack://hello-world/./src/views/Konva/Tpl2Save.vue?21fc"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('raw-loader',{attrs:{\"mytxt\":require('!raw-loader!./Tpl2Save.vue').default}}),_c('h1',{staticClass:\"border-bottom\"},[_vm._v(\"KonvaTpl2\")]),_vm._v(\" \"+_vm._s(_vm.msg)),_c('br'),_vm._v(\" \"+_vm._s(_vm.selId)),_c('br'),_c('b-row',[_c('b-col',{attrs:{\"lg\":\"4\"}},[_c('button',{staticClass:\"mb-1\",on:{\"click\":_vm.onClearSelect}},[_vm._v(\"Clear Select\")]),_c('div',{attrs:{\"id\":\"stage-parent\"}},[_c('div',{staticClass:\"border\",attrs:{\"id\":\"container\"}},[_c('v-stage',{ref:\"stage\",attrs:{\"config\":_vm.configKonva},on:{\"click\":_vm.onStageClick,\"mousemove\":_vm.onStageMouseMove,\"mouseenter\":_vm.onStageMouseenter,\"mouseleave\":_vm.onStageMouseleave}},[_c('v-layer',{ref:\"layer\"},[_vm._l((_vm.items),function(x,k){return _c('v-rect',{key:k,attrs:{\"config\":x},on:{\"dragstart\":_vm.handleDragstart,\"dragend\":_vm.handleDragend}})}),_c('v-circle',{ref:\"circle\"}),_c('v-rect',{ref:\"rect\"}),_c('v-transformer',{ref:\"transformer\"})],2)],1)],1)]),_c('button',{staticClass:\"mt-1\",on:{\"click\":_vm.onSave}},[_vm._v(\"Save\")])]),_c('b-col',{attrs:{\"lg\":\"8\"}},[_c('div',{staticClass:\"d-flex align-content-start flex-wrap\"},_vm._l((_vm.ds),function(x,k){return _c('div',{key:k,staticClass:\"p-2 bd-highlight\"},[_c('img',{staticClass:\"border\",attrs:{\"src\":x,\"width\":\"120\",\"height\":\"90\"}})])}),0),_vm._v(\" right \")])],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div>\r\n        <raw-loader :mytxt=\"require('!raw-loader!./Tpl2Save.vue').default\"></raw-loader>\r\n        <h1 class=\"border-bottom\">KonvaTpl2</h1>\r\n        {{ msg }}<br>\r\n        {{ selId }}<br>\r\n        <b-row>\r\n            <b-col lg=\"4\">\r\n                <button class=\"mb-1\" @click=\"onClearSelect\">Clear Select</button>\r\n                <div id=\"stage-parent\">\r\n                    <div id=\"container\" class=\"border\">\r\n                        <v-stage ref=\"stage\" @click=\"onStageClick\" @mousemove=\"onStageMouseMove\"\r\n                            @mouseenter=\"onStageMouseenter\" @mouseleave=\"onStageMouseleave\" :config=\"configKonva\">\r\n                            <v-layer ref=\"layer\">\r\n                                <v-rect v-for=\"(x, k) in items\" :key=\"k\" :config=\"x\" @dragstart=\"handleDragstart\"\r\n                                    @dragend=\"handleDragend\" />\r\n                                <v-circle ref=\"circle\"></v-circle> \r\n                                <v-rect ref=\"rect\"></v-rect>\r\n                                <v-transformer ref=\"transformer\" />\r\n                            </v-layer>\r\n                        </v-stage>\r\n                    </div>\r\n                </div>\r\n                <button class=\"mt-1\" @click=\"onSave\">Save</button>\r\n            </b-col>\r\n            <b-col lg=\"8\">\r\n\r\n                <div class=\"d-flex align-content-start flex-wrap\">\r\n                    <div class=\"p-2 bd-highlight \" v-for=\"(x, k) in ds\" :key=\"k\">\r\n                        <img :src=\"x\" width=\"120\" height=\"90\" class=\"border\" />\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                right\r\n            </b-col>\r\n        </b-row>\r\n    </div>\r\n</template>\r\n<script>\r\nvar sceneWidth = 1500;\r\nvar sceneHeight = 1000;\r\nvar stage = null;\r\nvar layer = null;\r\nfunction generateItems() {\r\n    let w=200;\r\n    let h=200;\r\n    let width = sceneWidth - w;\r\n    let height = sceneHeight - h;\r\n    const items = [];\r\n    for (let i = 0; i < 10; i++) {\r\n        items.push({\r\n            x: Math.random() * width,\r\n            y: Math.random() * height,\r\n            radius: 50,\r\n            id: \"node-\" + i,\r\n            width: w,\r\n            height: h,\r\n            fill: Konva.Util.getRandomColor(),\r\n            stroke: 'black', //Konva.Util.getRandomColor(),\r\n            draggable: true,\r\n            strokeWidth: 4,\r\n        });\r\n    }\r\n    return items;\r\n}\r\nexport default {\r\n    data() {\r\n        return {\r\n            configKonva: {\r\n                width: sceneWidth,\r\n                height: sceneHeight\r\n            },\r\n            items: [],\r\n            msg: '',\r\n            count:0,\r\n            selId:-1,\r\n            ds:[],\r\n\r\n        }\r\n    },\r\n    mounted() {\r\n        //this.items = generateItems();\r\n        this.$nextTick(function () {\r\n            layer = this.$refs.layer.getNode();\r\n            stage = this.$refs.stage.getNode();\r\n            window.addEventListener(\"resize\", this.fitStageIntoParentContainer);\r\n            this.fitStageIntoParentContainer();\r\n        })\r\n        //this.transformerNode = this.$refs.transformer.getNode();\r\n    },\r\n    watch: {\r\n        selId: function(newValue,oldValue) {\r\n            let ofill=this.getById(this.selId).fill();\r\n            this.getById(this.selId).setAttr(ofill);\r\n            this.getById(this.selId).fill(\"yellow\");\r\n            this.clearTransformer();\r\n            this.addTransformer(this.getById(this.selId));\r\n            if(oldValue==-1){\r\n            }else{\r\n                this.getById(oldValue).fill(this.getById(oldValue).getAttr('ofill'));\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        clearTransformer(){\r\n            let stage = this.$refs.stage.getNode();\r\n            let trs=stage.find('.rectTransformer');\r\n            trs.forEach(x=>{\r\n                x.destroy();\r\n            })\r\n        },\r\n        addTransformer(shape){\r\n            let stage = this.$refs.stage.getNode();\r\n            const transformerNode = this.$refs.transformer.getNode().clone();\r\n            transformerNode.name('rectTransformer');\r\n            let layer=this.$refs.layer.getNode();\r\n            layer.add(transformerNode);\r\n            transformerNode.nodes([shape]);\r\n        },\r\n        onClearSelect(){\r\n            this.clearTransformer();\r\n        },        \r\n        onSave() {\r\n            let stage = this.$refs.stage.getNode();\r\n            var dataURL = stage.toDataURL({ pixelRatio: 0.5 });\r\n            //alert(dataURL);\r\n            this.ds.push(dataURL);\r\n        },\r\n        handleDragstart(e) {\r\n            e.target.moveToTop();\r\n        },\r\n        handleDragend(e) {\r\n            e.target.fill('yellow');\r\n        },\r\n        onStageClick(e) {\r\n            let p = this.myGetMouse();\r\n            let layer=this.$refs.layer.getNode();\r\n\r\n            if(e.target.id()==''){\r\n                //let circle=this.makeCircle(this.getCount(),p.x,p.y,70);\r\n                let circle=this.makeRect(this.getCount(),p.x,p.y,100,100);\r\n                layer.add(circle);\r\n            }else{\r\n                e.target.setAttr('ofill',e.target.fill());\r\n                this.selId=e.target.id();\r\n            }\r\n        },\r\n        onStageMouseMove(e) {\r\n            let p = this.myGetMouse();\r\n        },\r\n        onStageMouseenter(e) {\r\n        },\r\n        onStageMouseleave(e) {\r\n        },\r\n        getCount(){\r\n            let kq=this.count;\r\n            this.count++;\r\n            return kq;\r\n        },\r\n        makeCircle(id,x,y,radius){\r\n            let circle=this.$refs.circle.getNode().clone();\r\n            circle.id(id.toString());\r\n            circle.x(x);\r\n            circle.y(y);\r\n            circle.radius(radius);\r\n            circle.draggable(true);\r\n            circle.fill(Konva.Util.getRandomColor());\r\n            circle.stroke('blue');\r\n            return circle;\r\n        },\r\n        makeRect(id,x,y,w,h){\r\n            let circle=this.$refs.rect.getNode().clone();\r\n            circle.id(id.toString());\r\n            circle.x(x);\r\n            circle.y(y);\r\n            circle.width(w);\r\n            circle.height(h);\r\n            circle.draggable(true);\r\n            circle.fill(Konva.Util.getRandomColor());\r\n            //circle.stroke('blue');\r\n            return circle;\r\n        },\r\n        myGetMouse() {\r\n            let scale = stage.scale().x;\r\n            var mousePos = stage.getPointerPosition();\r\n            var x = mousePos.x;\r\n            var y = mousePos.y;\r\n            var xx = Math.round(x / scale);\r\n            var yy = Math.round(y / scale);\r\n            return { x: xx, y: yy };\r\n        },\r\n        fitStageIntoParentContainer() {\r\n            var container = document.querySelector('#stage-parent');\r\n            var containerWidth = container.offsetWidth;\r\n            var scale = containerWidth / sceneWidth;\r\n            stage.width(sceneWidth * scale);\r\n            stage.height(sceneHeight * scale);\r\n            stage.scale({ x: scale, y: scale });\r\n            this.configKonva.width = sceneWidth * scale;\r\n            this.configKonva.height = sceneHeight * scale;\r\n        },\r\n        getById(id){\r\n            let layer=this.$refs.layer.getNode(); \r\n            return layer.find(`#${id}`)[0] \r\n        },\r\n    }\r\n}\r\n</script>\r\n  ","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Tpl2Save.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Tpl2Save.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Tpl2Save.vue?vue&type=template&id=7e081dbb&\"\nimport script from \"./Tpl2Save.vue?vue&type=script&lang=js&\"\nexport * from \"./Tpl2Save.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export default \"<template>\\r\\n    <div>\\r\\n        <raw-loader :mytxt=\\\"require('!raw-loader!./Tpl2Save.vue').default\\\"></raw-loader>\\r\\n        <h1 class=\\\"border-bottom\\\">KonvaTpl2</h1>\\r\\n        {{ msg }}<br>\\r\\n        {{ selId }}<br>\\r\\n        <b-row>\\r\\n            <b-col lg=\\\"4\\\">\\r\\n                <button class=\\\"mb-1\\\" @click=\\\"onClearSelect\\\">Clear Select</button>\\r\\n                <div id=\\\"stage-parent\\\">\\r\\n                    <div id=\\\"container\\\" class=\\\"border\\\">\\r\\n                        <v-stage ref=\\\"stage\\\" @click=\\\"onStageClick\\\" @mousemove=\\\"onStageMouseMove\\\"\\r\\n                            @mouseenter=\\\"onStageMouseenter\\\" @mouseleave=\\\"onStageMouseleave\\\" :config=\\\"configKonva\\\">\\r\\n                            <v-layer ref=\\\"layer\\\">\\r\\n                                <v-rect v-for=\\\"(x, k) in items\\\" :key=\\\"k\\\" :config=\\\"x\\\" @dragstart=\\\"handleDragstart\\\"\\r\\n                                    @dragend=\\\"handleDragend\\\" />\\r\\n                                <v-circle ref=\\\"circle\\\"></v-circle> \\r\\n                                <v-rect ref=\\\"rect\\\"></v-rect>\\r\\n                                <v-transformer ref=\\\"transformer\\\" />\\r\\n                            </v-layer>\\r\\n                        </v-stage>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <button class=\\\"mt-1\\\" @click=\\\"onSave\\\">Save</button>\\r\\n            </b-col>\\r\\n            <b-col lg=\\\"8\\\">\\r\\n\\r\\n                <div class=\\\"d-flex align-content-start flex-wrap\\\">\\r\\n                    <div class=\\\"p-2 bd-highlight \\\" v-for=\\\"(x, k) in ds\\\" :key=\\\"k\\\">\\r\\n                        <img :src=\\\"x\\\" width=\\\"120\\\" height=\\\"90\\\" class=\\\"border\\\" />\\r\\n                    </div>\\r\\n                </div>\\r\\n\\r\\n\\r\\n                right\\r\\n            </b-col>\\r\\n        </b-row>\\r\\n    </div>\\r\\n</template>\\r\\n<script>\\r\\nvar sceneWidth = 1500;\\r\\nvar sceneHeight = 1000;\\r\\nvar stage = null;\\r\\nvar layer = null;\\r\\nfunction generateItems() {\\r\\n    let w=200;\\r\\n    let h=200;\\r\\n    let width = sceneWidth - w;\\r\\n    let height = sceneHeight - h;\\r\\n    const items = [];\\r\\n    for (let i = 0; i < 10; i++) {\\r\\n        items.push({\\r\\n            x: Math.random() * width,\\r\\n            y: Math.random() * height,\\r\\n            radius: 50,\\r\\n            id: \\\"node-\\\" + i,\\r\\n            width: w,\\r\\n            height: h,\\r\\n            fill: Konva.Util.getRandomColor(),\\r\\n            stroke: 'black', //Konva.Util.getRandomColor(),\\r\\n            draggable: true,\\r\\n            strokeWidth: 4,\\r\\n        });\\r\\n    }\\r\\n    return items;\\r\\n}\\r\\nexport default {\\r\\n    data() {\\r\\n        return {\\r\\n            configKonva: {\\r\\n                width: sceneWidth,\\r\\n                height: sceneHeight\\r\\n            },\\r\\n            items: [],\\r\\n            msg: '',\\r\\n            count:0,\\r\\n            selId:-1,\\r\\n            ds:[],\\r\\n\\r\\n        }\\r\\n    },\\r\\n    mounted() {\\r\\n        //this.items = generateItems();\\r\\n        this.$nextTick(function () {\\r\\n            layer = this.$refs.layer.getNode();\\r\\n            stage = this.$refs.stage.getNode();\\r\\n            window.addEventListener(\\\"resize\\\", this.fitStageIntoParentContainer);\\r\\n            this.fitStageIntoParentContainer();\\r\\n        })\\r\\n        //this.transformerNode = this.$refs.transformer.getNode();\\r\\n    },\\r\\n    watch: {\\r\\n        selId: function(newValue,oldValue) {\\r\\n            let ofill=this.getById(this.selId).fill();\\r\\n            this.getById(this.selId).setAttr(ofill);\\r\\n            this.getById(this.selId).fill(\\\"yellow\\\");\\r\\n            this.clearTransformer();\\r\\n            this.addTransformer(this.getById(this.selId));\\r\\n            if(oldValue==-1){\\r\\n            }else{\\r\\n                this.getById(oldValue).fill(this.getById(oldValue).getAttr('ofill'));\\r\\n            }\\r\\n        }\\r\\n    },\\r\\n    methods: {\\r\\n        clearTransformer(){\\r\\n            let stage = this.$refs.stage.getNode();\\r\\n            let trs=stage.find('.rectTransformer');\\r\\n            trs.forEach(x=>{\\r\\n                x.destroy();\\r\\n            })\\r\\n        },\\r\\n        addTransformer(shape){\\r\\n            let stage = this.$refs.stage.getNode();\\r\\n            const transformerNode = this.$refs.transformer.getNode().clone();\\r\\n            transformerNode.name('rectTransformer');\\r\\n            let layer=this.$refs.layer.getNode();\\r\\n            layer.add(transformerNode);\\r\\n            transformerNode.nodes([shape]);\\r\\n        },\\r\\n        onClearSelect(){\\r\\n            this.clearTransformer();\\r\\n        },        \\r\\n        onSave() {\\r\\n            let stage = this.$refs.stage.getNode();\\r\\n            var dataURL = stage.toDataURL({ pixelRatio: 0.5 });\\r\\n            //alert(dataURL);\\r\\n            this.ds.push(dataURL);\\r\\n        },\\r\\n        handleDragstart(e) {\\r\\n            e.target.moveToTop();\\r\\n        },\\r\\n        handleDragend(e) {\\r\\n            e.target.fill('yellow');\\r\\n        },\\r\\n        onStageClick(e) {\\r\\n            let p = this.myGetMouse();\\r\\n            let layer=this.$refs.layer.getNode();\\r\\n\\r\\n            if(e.target.id()==''){\\r\\n                //let circle=this.makeCircle(this.getCount(),p.x,p.y,70);\\r\\n                let circle=this.makeRect(this.getCount(),p.x,p.y,100,100);\\r\\n                layer.add(circle);\\r\\n            }else{\\r\\n                e.target.setAttr('ofill',e.target.fill());\\r\\n                this.selId=e.target.id();\\r\\n            }\\r\\n        },\\r\\n        onStageMouseMove(e) {\\r\\n            let p = this.myGetMouse();\\r\\n        },\\r\\n        onStageMouseenter(e) {\\r\\n        },\\r\\n        onStageMouseleave(e) {\\r\\n        },\\r\\n        getCount(){\\r\\n            let kq=this.count;\\r\\n            this.count++;\\r\\n            return kq;\\r\\n        },\\r\\n        makeCircle(id,x,y,radius){\\r\\n            let circle=this.$refs.circle.getNode().clone();\\r\\n            circle.id(id.toString());\\r\\n            circle.x(x);\\r\\n            circle.y(y);\\r\\n            circle.radius(radius);\\r\\n            circle.draggable(true);\\r\\n            circle.fill(Konva.Util.getRandomColor());\\r\\n            circle.stroke('blue');\\r\\n            return circle;\\r\\n        },\\r\\n        makeRect(id,x,y,w,h){\\r\\n            let circle=this.$refs.rect.getNode().clone();\\r\\n            circle.id(id.toString());\\r\\n            circle.x(x);\\r\\n            circle.y(y);\\r\\n            circle.width(w);\\r\\n            circle.height(h);\\r\\n            circle.draggable(true);\\r\\n            circle.fill(Konva.Util.getRandomColor());\\r\\n            //circle.stroke('blue');\\r\\n            return circle;\\r\\n        },\\r\\n        myGetMouse() {\\r\\n            let scale = stage.scale().x;\\r\\n            var mousePos = stage.getPointerPosition();\\r\\n            var x = mousePos.x;\\r\\n            var y = mousePos.y;\\r\\n            var xx = Math.round(x / scale);\\r\\n            var yy = Math.round(y / scale);\\r\\n            return { x: xx, y: yy };\\r\\n        },\\r\\n        fitStageIntoParentContainer() {\\r\\n            var container = document.querySelector('#stage-parent');\\r\\n            var containerWidth = container.offsetWidth;\\r\\n            var scale = containerWidth / sceneWidth;\\r\\n            stage.width(sceneWidth * scale);\\r\\n            stage.height(sceneHeight * scale);\\r\\n            stage.scale({ x: scale, y: scale });\\r\\n            this.configKonva.width = sceneWidth * scale;\\r\\n            this.configKonva.height = sceneHeight * scale;\\r\\n        },\\r\\n        getById(id){\\r\\n            let layer=this.$refs.layer.getNode(); \\r\\n            return layer.find(`#${id}`)[0] \\r\\n        },\\r\\n    }\\r\\n}\\r\\n</script>\\r\\n  \";"],"names":["render","_vm","this","_c","_self","attrs","require","staticClass","_v","_s","msg","selId","on","onClearSelect","ref","configKonva","onStageClick","onStageMouseMove","onStageMouseenter","onStageMouseleave","_l","items","x","k","key","handleDragstart","handleDragend","onSave","ds","staticRenderFns","sceneWidth","sceneHeight","stage","data","width","height","count","mounted","layer","window","watch","methods","clearTransformer","trs","addTransformer","transformerNode","pixelRatio","e","getCount","makeCircle","circle","makeRect","myGetMouse","y","fitStageIntoParentContainer","getById","component"],"sourceRoot":""}