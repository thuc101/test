{"version":3,"file":"js/357.8d950826.js","mappings":"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","sources":["webpack://hello-world/./src/views/Konva/TplRect.vue","webpack://hello-world/src/views/Konva/TplRect.vue","webpack://hello-world/./src/views/Konva/TplRect.vue?8cd8","webpack://hello-world/./src/views/Konva/TplRect.vue?24c7","webpack://hello-world/./src/views/Konva/TplRect.vue?9a6e"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('raw-loader',{attrs:{\"mytxt\":require('!raw-loader!./TplRect.vue').default}}),_c('h1',{staticClass:\"border-bottom\"},[_vm._v(\"KonvaTpl2\")]),_c('b-row',[_c('b-col',{attrs:{\"lg\":\"4\"}},[_c('div',{attrs:{\"id\":\"stage-parent\"}},[_c('div',{staticClass:\"border\",attrs:{\"id\":\"container\"}},[_c('v-stage',{ref:\"stage\",attrs:{\"config\":_vm.configKonva},on:{\"click\":_vm.onStageClick,\"mousemove\":_vm.onStageMouseMove,\"mouseenter\":_vm.onStageMouseenter,\"mouseleave\":_vm.onStageMouseleave}},[_c('v-layer',{ref:\"layer\"},[_vm._l((_vm.items),function(x,k){return _c('v-rect',{key:k,attrs:{\"config\":x},on:{\"dragstart\":_vm.handleDragstart,\"dragend\":_vm.handleDragend}})}),_c('v-rect',{ref:\"rect\"})],2)],1)],1)]),_vm._v(\" \"+_vm._s(_vm.msg)),_c('br'),_c('button',{staticClass:\"mt-1\",on:{\"click\":_vm.onSave}},[_vm._v(\"Save\")]),_c('button',{staticClass:\"mt-1\",on:{\"click\":_vm.onTest}},[_vm._v(\"Test\")])]),_c('b-col',{attrs:{\"lg\":\"8\"}},[_vm._v(\" right \")])],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div>\r\n        <raw-loader :mytxt=\"require('!raw-loader!./TplRect.vue').default\"></raw-loader>\r\n        <h1 class=\"border-bottom\">KonvaTpl2</h1>\r\n        <b-row>\r\n            <b-col lg=\"4\">\r\n                <div id=\"stage-parent\">\r\n                    <div id=\"container\" class=\"border\">\r\n                        <v-stage ref=\"stage\" @click=\"onStageClick\" @mousemove=\"onStageMouseMove\"\r\n                            @mouseenter=\"onStageMouseenter\" @mouseleave=\"onStageMouseleave\" :config=\"configKonva\">\r\n                            <v-layer ref=\"layer\">\r\n                                <v-rect v-for=\"(x, k) in items\" :key=\"k\" :config=\"x\" @dragstart=\"handleDragstart\"\r\n                                    @dragend=\"handleDragend\" />\r\n                                <v-rect ref=\"rect\"></v-rect>\r\n\r\n\r\n                            </v-layer>\r\n                        </v-stage>\r\n                    </div>\r\n                </div>\r\n                {{ msg }}<br>\r\n                <button class=\"mt-1\" @click=\"onSave\">Save</button>\r\n                <button class=\"mt-1\" @click=\"onTest\">Test</button>\r\n            </b-col>\r\n            <b-col lg=\"8\">\r\n                right\r\n            </b-col>\r\n        </b-row>\r\n    </div>\r\n</template>\r\n<script>\r\nvar sceneWidth = 1500;\r\nvar sceneHeight = 1000;\r\nvar stage = null;\r\nvar layer = null;\r\nfunction generateItems() {\r\n    let w=200;\r\n    let h=200;\r\n    let width = sceneWidth - w;\r\n    let height = sceneHeight - h;\r\n    const items = [];\r\n    for (let i = 0; i < 2; i++) {\r\n        items.push({\r\n            x: Math.random() * width,\r\n            y: Math.random() * height,\r\n            radius: 50,\r\n            id: \"node-\" + i,\r\n            width: w,\r\n            height: h,\r\n            fill: Konva.Util.getRandomColor(),\r\n            stroke: 'black', //Konva.Util.getRandomColor(),\r\n            draggable: true,\r\n            strokeWidth: 4,\r\n        });\r\n    }\r\n    return items;\r\n}\r\nexport default {\r\n    data() {\r\n        return {\r\n            configKonva: {\r\n                width: sceneWidth,\r\n                height: sceneHeight\r\n            },\r\n            items: [],\r\n            msg: '',\r\n            sel:null,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.items = generateItems();\r\n        this.$nextTick(function () {\r\n            layer = this.$refs.layer.getNode();\r\n            stage = this.$refs.stage.getNode();\r\n            window.addEventListener(\"resize\", this.fitStageIntoParentContainer);\r\n            this.fitStageIntoParentContainer();\r\n        })\r\n        let rect=this.$refs.rect.getNode();\r\n        rect.x(10);\r\n        rect.y(10);\r\n        rect.width(100);\r\n        rect.height(100);\r\n        rect.fill('red');\r\n        //e.target.moveToTop();\r\n    },\r\n    methods: {\r\n        onTest(){\r\n            let layer=this.$refs.layer.getNode();\r\n            let children=layer.getChildren();\r\n            children.forEach(x=>{\r\n                let r={\r\n                    x: Math.round (x.x()),\r\n                    y: Math.round (x.y()),\r\n                    w: Math.round (x.width()),\r\n                    h: Math.round (x.height())\r\n                }\r\n                console.log(JSON.stringify(r));\r\n            })\r\n            //alert(children.length);\r\n            //alert('test');\r\n            /*\r\n\r\nconst childrenToDestroy = this.layer.getChildren().filter(child => shouldDelete(child));\r\nchildrenToDestroy.forEach(child => child.destroy());\r\n\r\n            // get all children\r\n            var children = layer.getChildren();\r\n\r\n            // get only circles\r\n            var circles = layer.getChildren(function(node){\r\n            return node.getClassName() === 'Circle';\r\n            });\r\n\r\n                this.layer.getChildren().each((child) => {\r\n                if (shouldDelete(child)) {\r\n                    child.destroy();\r\n                }\r\n                });\r\n                this.layer.draw();            \r\n            */            \r\n        },\r\n        onSave() {\r\n            let stage = this.$refs.stage.getNode();\r\n            var dataURL = stage.toDataURL({ pixelRatio: 0.5 });\r\n            alert(dataURL);\r\n        },\r\n        handleDragstart(e) {\r\n            //e.target.moveToTop();\r\n            // this.sel=e.target;\r\n            // console.log(JSON.stringify({\r\n            //     x:this.sel.x(),\r\n            //     y:this.sel.y(),\r\n            //     w:this.sel.width(),\r\n            //     h:this.sel.height()\r\n            // }));\r\n        },\r\n        handleDragend(e) {\r\n            e.target.fill('yellow');\r\n        },\r\n        onStageClick(e) {\r\n            let p1 = this.myGetMouse();\r\n            this.msg = `mouse click ${JSON.stringify(p1)}`;\r\n        },\r\n        onStageMouseMove(e) {\r\n            let p = this.myGetMouse();\r\n            //console.log(this.items[0]);\r\n            let r=this.items[0];\r\n            this.msg=JSON.stringify(r);\r\n\r\n        },\r\n        onStageMouseenter(e) {\r\n            let rect=this.$refs.rect.getNode();\r\n            rect.moveToTop();\r\n        },\r\n        onStageMouseleave(e) {\r\n        },\r\n        myGetMouse() {\r\n            let scale = stage.scale().x;\r\n            var mousePos = stage.getPointerPosition();\r\n            var x = mousePos.x;\r\n            var y = mousePos.y;\r\n            var xx = Math.round(x / scale);\r\n            var yy = Math.round(y / scale);\r\n            return { x: xx, y: yy };\r\n        },\r\n        fitStageIntoParentContainer() {\r\n            var container = document.querySelector('#stage-parent');\r\n            var containerWidth = container.offsetWidth;\r\n            var scale = containerWidth / sceneWidth;\r\n            stage.width(sceneWidth * scale);\r\n            stage.height(sceneHeight * scale);\r\n            stage.scale({ x: scale, y: scale });\r\n            this.configKonva.width = sceneWidth * scale;\r\n            this.configKonva.height = sceneHeight * scale;\r\n        },\r\n    }\r\n}\r\n</script>\r\n  ","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./TplRect.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./TplRect.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./TplRect.vue?vue&type=template&id=159a23bc&\"\nimport script from \"./TplRect.vue?vue&type=script&lang=js&\"\nexport * from \"./TplRect.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export default \"<template>\\r\\n    <div>\\r\\n        <raw-loader :mytxt=\\\"require('!raw-loader!./TplRect.vue').default\\\"></raw-loader>\\r\\n        <h1 class=\\\"border-bottom\\\">KonvaTpl2</h1>\\r\\n        <b-row>\\r\\n            <b-col lg=\\\"4\\\">\\r\\n                <div id=\\\"stage-parent\\\">\\r\\n                    <div id=\\\"container\\\" class=\\\"border\\\">\\r\\n                        <v-stage ref=\\\"stage\\\" @click=\\\"onStageClick\\\" @mousemove=\\\"onStageMouseMove\\\"\\r\\n                            @mouseenter=\\\"onStageMouseenter\\\" @mouseleave=\\\"onStageMouseleave\\\" :config=\\\"configKonva\\\">\\r\\n                            <v-layer ref=\\\"layer\\\">\\r\\n                                <v-rect v-for=\\\"(x, k) in items\\\" :key=\\\"k\\\" :config=\\\"x\\\" @dragstart=\\\"handleDragstart\\\"\\r\\n                                    @dragend=\\\"handleDragend\\\" />\\r\\n                                <v-rect ref=\\\"rect\\\"></v-rect>\\r\\n\\r\\n\\r\\n                            </v-layer>\\r\\n                        </v-stage>\\r\\n                    </div>\\r\\n                </div>\\r\\n                {{ msg }}<br>\\r\\n                <button class=\\\"mt-1\\\" @click=\\\"onSave\\\">Save</button>\\r\\n                <button class=\\\"mt-1\\\" @click=\\\"onTest\\\">Test</button>\\r\\n            </b-col>\\r\\n            <b-col lg=\\\"8\\\">\\r\\n                right\\r\\n            </b-col>\\r\\n        </b-row>\\r\\n    </div>\\r\\n</template>\\r\\n<script>\\r\\nvar sceneWidth = 1500;\\r\\nvar sceneHeight = 1000;\\r\\nvar stage = null;\\r\\nvar layer = null;\\r\\nfunction generateItems() {\\r\\n    let w=200;\\r\\n    let h=200;\\r\\n    let width = sceneWidth - w;\\r\\n    let height = sceneHeight - h;\\r\\n    const items = [];\\r\\n    for (let i = 0; i < 2; i++) {\\r\\n        items.push({\\r\\n            x: Math.random() * width,\\r\\n            y: Math.random() * height,\\r\\n            radius: 50,\\r\\n            id: \\\"node-\\\" + i,\\r\\n            width: w,\\r\\n            height: h,\\r\\n            fill: Konva.Util.getRandomColor(),\\r\\n            stroke: 'black', //Konva.Util.getRandomColor(),\\r\\n            draggable: true,\\r\\n            strokeWidth: 4,\\r\\n        });\\r\\n    }\\r\\n    return items;\\r\\n}\\r\\nexport default {\\r\\n    data() {\\r\\n        return {\\r\\n            configKonva: {\\r\\n                width: sceneWidth,\\r\\n                height: sceneHeight\\r\\n            },\\r\\n            items: [],\\r\\n            msg: '',\\r\\n            sel:null,\\r\\n        }\\r\\n    },\\r\\n    mounted() {\\r\\n        this.items = generateItems();\\r\\n        this.$nextTick(function () {\\r\\n            layer = this.$refs.layer.getNode();\\r\\n            stage = this.$refs.stage.getNode();\\r\\n            window.addEventListener(\\\"resize\\\", this.fitStageIntoParentContainer);\\r\\n            this.fitStageIntoParentContainer();\\r\\n        })\\r\\n        let rect=this.$refs.rect.getNode();\\r\\n        rect.x(10);\\r\\n        rect.y(10);\\r\\n        rect.width(100);\\r\\n        rect.height(100);\\r\\n        rect.fill('red');\\r\\n        //e.target.moveToTop();\\r\\n    },\\r\\n    methods: {\\r\\n        onTest(){\\r\\n            let layer=this.$refs.layer.getNode();\\r\\n            let children=layer.getChildren();\\r\\n            children.forEach(x=>{\\r\\n                let r={\\r\\n                    x: Math.round (x.x()),\\r\\n                    y: Math.round (x.y()),\\r\\n                    w: Math.round (x.width()),\\r\\n                    h: Math.round (x.height())\\r\\n                }\\r\\n                console.log(JSON.stringify(r));\\r\\n            })\\r\\n            //alert(children.length);\\r\\n            //alert('test');\\r\\n            /*\\r\\n\\r\\nconst childrenToDestroy = this.layer.getChildren().filter(child => shouldDelete(child));\\r\\nchildrenToDestroy.forEach(child => child.destroy());\\r\\n\\r\\n            // get all children\\r\\n            var children = layer.getChildren();\\r\\n\\r\\n            // get only circles\\r\\n            var circles = layer.getChildren(function(node){\\r\\n            return node.getClassName() === 'Circle';\\r\\n            });\\r\\n\\r\\n                this.layer.getChildren().each((child) => {\\r\\n                if (shouldDelete(child)) {\\r\\n                    child.destroy();\\r\\n                }\\r\\n                });\\r\\n                this.layer.draw();            \\r\\n            */            \\r\\n        },\\r\\n        onSave() {\\r\\n            let stage = this.$refs.stage.getNode();\\r\\n            var dataURL = stage.toDataURL({ pixelRatio: 0.5 });\\r\\n            alert(dataURL);\\r\\n        },\\r\\n        handleDragstart(e) {\\r\\n            //e.target.moveToTop();\\r\\n            // this.sel=e.target;\\r\\n            // console.log(JSON.stringify({\\r\\n            //     x:this.sel.x(),\\r\\n            //     y:this.sel.y(),\\r\\n            //     w:this.sel.width(),\\r\\n            //     h:this.sel.height()\\r\\n            // }));\\r\\n        },\\r\\n        handleDragend(e) {\\r\\n            e.target.fill('yellow');\\r\\n        },\\r\\n        onStageClick(e) {\\r\\n            let p1 = this.myGetMouse();\\r\\n            this.msg = `mouse click ${JSON.stringify(p1)}`;\\r\\n        },\\r\\n        onStageMouseMove(e) {\\r\\n            let p = this.myGetMouse();\\r\\n            //console.log(this.items[0]);\\r\\n            let r=this.items[0];\\r\\n            this.msg=JSON.stringify(r);\\r\\n\\r\\n        },\\r\\n        onStageMouseenter(e) {\\r\\n            let rect=this.$refs.rect.getNode();\\r\\n            rect.moveToTop();\\r\\n        },\\r\\n        onStageMouseleave(e) {\\r\\n        },\\r\\n        myGetMouse() {\\r\\n            let scale = stage.scale().x;\\r\\n            var mousePos = stage.getPointerPosition();\\r\\n            var x = mousePos.x;\\r\\n            var y = mousePos.y;\\r\\n            var xx = Math.round(x / scale);\\r\\n            var yy = Math.round(y / scale);\\r\\n            return { x: xx, y: yy };\\r\\n        },\\r\\n        fitStageIntoParentContainer() {\\r\\n            var container = document.querySelector('#stage-parent');\\r\\n            var containerWidth = container.offsetWidth;\\r\\n            var scale = containerWidth / sceneWidth;\\r\\n            stage.width(sceneWidth * scale);\\r\\n            stage.height(sceneHeight * scale);\\r\\n            stage.scale({ x: scale, y: scale });\\r\\n            this.configKonva.width = sceneWidth * scale;\\r\\n            this.configKonva.height = sceneHeight * scale;\\r\\n        },\\r\\n    }\\r\\n}\\r\\n</script>\\r\\n  \";"],"names":["render","_vm","this","_c","_self","attrs","require","staticClass","_v","ref","configKonva","on","onStageClick","onStageMouseMove","onStageMouseenter","onStageMouseleave","_l","items","x","k","key","handleDragstart","handleDragend","_s","msg","onSave","onTest","staticRenderFns","sceneWidth","sceneHeight","stage","generateItems","y","radius","id","width","height","fill","stroke","draggable","strokeWidth","data","sel","mounted","layer","window","rect","methods","children","w","h","console","pixelRatio","alert","e","myGetMouse","fitStageIntoParentContainer","component"],"sourceRoot":""}