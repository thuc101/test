"use strict";(self["webpackChunkhello_world"]=self["webpackChunkhello_world"]||[]).push([[614],{52614:function(e,t,n){n.r(t),n.d(t,{default:function(){return v}});var r=function(){var e=this,t=e._self._c;return t("div",[t("raw-loader",{attrs:{mytxt:n(82587).Z}}),t("h1",{staticClass:"border-bottom"},[e._v("KonvaTpl2")]),e._v(" "+e._s(e.msg)+" "),t("b-row",[t("b-col",{attrs:{lg:"4"}},[t("div",{attrs:{id:"stage-parent"}},[t("div",{staticClass:"border",attrs:{id:"container"}},[t("v-stage",{ref:"stage",attrs:{config:e.configKonva},on:{click:e.onStageClick,mousemove:e.onStageMouseMove,mouseenter:e.onStageMouseenter,mouseleave:e.onStageMouseleave}},[t("v-layer",{ref:"layer"},e._l(e.items,(function(n,r){return t("v-rect",{key:r,attrs:{config:n},on:{dragstart:e.handleDragstart,dragend:e.handleDragend}})})),1)],1)],1)]),t("button",{staticClass:"mt-1",on:{click:e.onSave}},[e._v("Save")])]),t("b-col",{attrs:{lg:"8"}},[t("div",{staticClass:"d-flex align-content-start flex-wrap"},e._l(e.ds,(function(n,r){return t("div",{key:r,staticClass:"p-2 bd-highlight position-relative"},[t("img",{staticClass:"border",attrs:{src:n,width:"120",height:"90"}}),t("div",{staticClass:"position-absolute",staticStyle:{right:"10px",bottom:"10px"}},[t("button",{staticClass:"mr-1"},[e._v("Add")]),t("button",{staticClass:"mr-1"},[e._v("Del")])])])})),0)])],1)],1)},a=[],s=(n(57658),1500),o=1e3,i=null;function l(){let e=200,t=200,n=s-e,r=o-t;const a=[];for(let s=0;s<10;s++)a.push({x:Math.random()*n,y:Math.random()*r,radius:50,id:"node-"+s,width:e,height:t,fill:Konva.Util.getRandomColor(),stroke:"black",draggable:!0,strokeWidth:4});return a}var d={data(){return{configKonva:{width:s,height:o},items:[],msg:"",ds:[]}},mounted(){this.items=l(),this.$nextTick((function(){this.$refs.layer.getNode(),i=this.$refs.stage.getNode(),window.addEventListener("resize",this.fitStageIntoParentContainer),this.fitStageIntoParentContainer()})),document.addEventListener("paste",this.onPasteEvent)},methods:{onPasteEvent(e){var t=e.clipboardData.items[0];let n=this;if(0===t.type.indexOf("image")){var r=t.getAsFile(),a=new FileReader;a.onload=function(e){document.getElementById("container").src=e.target.result,n.ds.push(e.target.result)},a.readAsDataURL(r)}},onSave(){let e=this.$refs.stage.getNode();var t=e.toDataURL({pixelRatio:.5});alert(t)},handleDragstart(e){e.target.moveToTop()},handleDragend(e){e.target.fill("yellow")},onStageClick(e){let t=this.myGetMouse();this.msg=`mouse click ${JSON.stringify(t)}`},onStageMouseMove(e){this.myGetMouse()},onStageMouseenter(e){},onStageMouseleave(e){},myGetMouse(){let e=i.scale().x;var t=i.getPointerPosition(),n=t.x,r=t.y,a=Math.round(n/e),s=Math.round(r/e);return{x:a,y:s}},fitStageIntoParentContainer(){var e=document.querySelector("#stage-parent"),t=e.offsetWidth,n=t/s;i.width(s*n),i.height(o*n),i.scale({x:n,y:n}),this.configKonva.width=s*n,this.configKonva.height=o*n}}},g=d,c=n(1001),h=(0,c.Z)(g,r,a,!1,null,null,null),v=h.exports},82587:function(e,t){t["Z"]='<template>\r\n    <div>\r\n        <raw-loader :mytxt="require(\'!raw-loader!./TplCtrlV.vue\').default"></raw-loader>\r\n        <h1 class="border-bottom">KonvaTpl2</h1>\r\n        {{ msg }}\r\n        <b-row>\r\n            <b-col lg="4">\r\n                <div id="stage-parent">\r\n                    <div id="container" class="border">\r\n                        <v-stage ref="stage" @click="onStageClick" @mousemove="onStageMouseMove"\r\n                            @mouseenter="onStageMouseenter" @mouseleave="onStageMouseleave" :config="configKonva">\r\n                            <v-layer ref="layer">\r\n                                <v-rect v-for="(x, k) in items" :key="k" :config="x" @dragstart="handleDragstart"\r\n                                    @dragend="handleDragend" />\r\n                            </v-layer>\r\n                        </v-stage>\r\n                    </div>\r\n                </div>\r\n                <button class="mt-1" @click="onSave">Save</button>\r\n            </b-col>\r\n            <b-col lg="8">\r\n                <div class="d-flex align-content-start flex-wrap">\r\n                    <div class="p-2 bd-highlight position-relative " v-for="(x, k) in ds" :key="k">\r\n                        <img :src="x" width="120" height="90" class="border" />\r\n                        <div class="position-absolute" style="right:10px;bottom:10px"> \r\n                            <button class="mr-1" >Add</button>\r\n                            <button class="mr-1" >Del</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </b-col>\r\n        </b-row>\r\n    </div>\r\n</template>\r\n<script>\r\nvar sceneWidth = 1500;\r\nvar sceneHeight = 1000;\r\nvar stage = null;\r\nvar layer = null;\r\nfunction generateItems() {\r\n    let w=200;\r\n    let h=200;\r\n    let width = sceneWidth - w;\r\n    let height = sceneHeight - h;\r\n    const items = [];\r\n    for (let i = 0; i < 10; i++) {\r\n        items.push({\r\n            x: Math.random() * width,\r\n            y: Math.random() * height,\r\n            radius: 50,\r\n            id: "node-" + i,\r\n            width: w,\r\n            height: h,\r\n            fill: Konva.Util.getRandomColor(),\r\n            stroke: \'black\', //Konva.Util.getRandomColor(),\r\n            draggable: true,\r\n            strokeWidth: 4,\r\n        });\r\n    }\r\n    return items;\r\n}\r\nexport default {\r\n    data() {\r\n        return {\r\n            configKonva: {\r\n                width: sceneWidth,\r\n                height: sceneHeight\r\n            },\r\n            items: [],\r\n            msg: \'\',\r\n            ds:[]\r\n        }\r\n    },\r\n    mounted() {\r\n        this.items = generateItems();\r\n        this.$nextTick(function () {\r\n            layer = this.$refs.layer.getNode();\r\n            stage = this.$refs.stage.getNode();\r\n            window.addEventListener("resize", this.fitStageIntoParentContainer);\r\n            this.fitStageIntoParentContainer();\r\n        })\r\n        document.addEventListener(\'paste\', this.onPasteEvent)\r\n    },\r\n    methods: {\r\n\r\n        onPasteEvent(pasteEvent){\r\n            var item = pasteEvent.clipboardData.items[0];\r\n            let that=this;\r\n            if (item.type.indexOf("image") === 0) {\r\n                var blob = item.getAsFile();\r\n                var reader = new FileReader();\r\n                reader.onload = function (event) {\r\n                    document.getElementById("container").src = event.target.result;\r\n                    //that.src=event.target.result;\r\n                    //alert(event.target.result);\r\n                    that.ds.push(event.target.result);\r\n                };\r\n                reader.readAsDataURL(blob);\r\n            }\r\n        },\r\n\r\n\r\n        onSave() {\r\n            let stage = this.$refs.stage.getNode();\r\n            var dataURL = stage.toDataURL({ pixelRatio: 0.5 });\r\n            alert(dataURL);\r\n        },\r\n        handleDragstart(e) {\r\n            e.target.moveToTop();\r\n        },\r\n        handleDragend(e) {\r\n            e.target.fill(\'yellow\');\r\n        },\r\n        onStageClick(e) {\r\n            let p1 = this.myGetMouse();\r\n            this.msg = `mouse click ${JSON.stringify(p1)}`;\r\n        },\r\n        onStageMouseMove(e) {\r\n            let p = this.myGetMouse();\r\n        },\r\n        onStageMouseenter(e) {\r\n        },\r\n        onStageMouseleave(e) {\r\n        },\r\n        myGetMouse() {\r\n            let scale = stage.scale().x;\r\n            var mousePos = stage.getPointerPosition();\r\n            var x = mousePos.x;\r\n            var y = mousePos.y;\r\n            var xx = Math.round(x / scale);\r\n            var yy = Math.round(y / scale);\r\n            return { x: xx, y: yy };\r\n        },\r\n        fitStageIntoParentContainer() {\r\n            var container = document.querySelector(\'#stage-parent\');\r\n            var containerWidth = container.offsetWidth;\r\n            var scale = containerWidth / sceneWidth;\r\n            stage.width(sceneWidth * scale);\r\n            stage.height(sceneHeight * scale);\r\n            stage.scale({ x: scale, y: scale });\r\n            this.configKonva.width = sceneWidth * scale;\r\n            this.configKonva.height = sceneHeight * scale;\r\n        },\r\n    }\r\n}\r\n<\/script>\r\n  '}}]);
//# sourceMappingURL=614.5cea6fa5.js.map