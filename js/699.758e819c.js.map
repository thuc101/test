{"version":3,"file":"js/699.758e819c.js","mappings":"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","sources":["webpack://hello-world/./src/views/Konva/Tpl2SaveImg.vue","webpack://hello-world/src/views/Konva/Tpl2SaveImg.vue","webpack://hello-world/./src/views/Konva/Tpl2SaveImg.vue?30ab","webpack://hello-world/./src/views/Konva/Tpl2SaveImg.vue?9e83","webpack://hello-world/./src/views/Konva/Tpl2SaveImg.vue?8d83"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('raw-loader',{attrs:{\"mytxt\":require('!raw-loader!./Tpl2SaveImg.vue').default}}),_c('h1',{staticClass:\"border-bottom\"},[_vm._v(\"KonvaTpl2\")]),_vm._v(\" \"+_vm._s(_vm.msg)),_c('br'),_vm._v(\" \"+_vm._s(_vm.selId)),_c('br'),_c('b-row',[_c('b-col',{attrs:{\"lg\":\"4\"}},[_c('div',{staticClass:\"mb-1\"},[_c('button',{staticClass:\"mr-1\",on:{\"click\":_vm.onClearSelect}},[_vm._v(\"Clear Select\")]),_c('button',{staticClass:\"mr-1\",attrs:{\"disabled\":_vm.selId == -1},on:{\"click\":_vm.onFull}},[_vm._v(\"Full\")])]),_c('div',{attrs:{\"id\":\"stage-parent\"}},[_c('div',{staticClass:\"border\",attrs:{\"id\":\"container\"}},[_c('v-stage',{ref:\"stage\",attrs:{\"config\":_vm.configKonva},on:{\"click\":_vm.onStageClick,\"mousemove\":_vm.onStageMouseMove,\"mouseenter\":_vm.onStageMouseenter,\"mouseleave\":_vm.onStageMouseleave}},[_c('v-layer',{ref:\"layer\",on:{\"mouseover\":_vm.onmouseover,\"mouseout\":_vm.onmouseout}},[_vm._l((_vm.items),function(x,k){return _c('v-rect',{key:k,attrs:{\"config\":x},on:{\"dragstart\":_vm.handleDragstart,\"dragend\":_vm.handleDragend}})}),_c('v-circle',{ref:\"circle\"}),_c('v-rect',{ref:\"rect\"}),_c('v-image',{ref:\"img\"}),_c('v-shape',{ref:\"custom\",attrs:{\"config\":{\n                                sceneFunc: (context, shape) => {\n                                    let w = 260;\n                                    let h = 170;\n                                    context.beginPath();\n                                    //context.rect(0, 0, w, h);\n                                    context.moveTo(20, 50);\n                                    context.lineTo(220, 80);\n                                    context.quadraticCurveTo(150, 100, 260, 170);\n                                    context.closePath();\n                                    context.fillStrokeShape(shape);\n                                },\n                                fill: '#00D2FF',\n                                stroke: 'black',\n                                strokeWidth: 4,\n                                draggable: true,\n                                width: 260,\n                                height: 170\n                            }}}),_c('v-text',{attrs:{\"config\":{\n                                id:'thuc-1000',\n                                x: 15,//stage.width() / 2,\n                                y: 15,\n                                text: 'Thá»©c 101',\n                                fontSize: 80,\n                                fontFamily: 'Tahoma',//'Calibri',\n                                fill: 'green',\n                                padding: 20,\n                                align: 'center',\n                                draggable:true,\n                            }}}),_c('v-transformer',{ref:\"transformer\",attrs:{\"config\":{\n                                anchorStroke: 'red',\n                                anchorFill: 'yellow',\n                                anchorSize: 8,\n                                borderStroke: 'green',\n                                borderDash: [3, 3],\n                            }}})],2)],1)],1)]),_c('button',{staticClass:\"mt-1\",on:{\"click\":_vm.onSave}},[_vm._v(\"Save\")])]),_c('b-col',{attrs:{\"lg\":\"8\"}},[_c('div',{staticClass:\"d-flex align-content-start flex-wrap\"},_vm._l((_vm.ds),function(x,k){return _c('div',{key:k,staticClass:\"p-2 bd-highlight\"},[_c('img',{staticClass:\"border\",attrs:{\"src\":x,\"width\":\"120\",\"height\":\"90\"}})])}),0)])],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div>\r\n        <raw-loader :mytxt=\"require('!raw-loader!./Tpl2SaveImg.vue').default\"></raw-loader>\r\n        <h1 class=\"border-bottom\">KonvaTpl2</h1>\r\n        {{ msg }}<br>\r\n        {{ selId }}<br>\r\n        <b-row>\r\n            <b-col lg=\"4\">\r\n                <div class=\"mb-1\">\r\n                    <button class=\"mr-1\" @click=\"onClearSelect\">Clear Select</button>\r\n                    <button class=\"mr-1\" :disabled=\"selId == -1\" @click=\"onFull\">Full</button>\r\n                </div>\r\n                <div id=\"stage-parent\">\r\n                    <div id=\"container\" class=\"border\">\r\n                        <v-stage ref=\"stage\" @click=\"onStageClick\" @mousemove=\"onStageMouseMove\"\r\n                            @mouseenter=\"onStageMouseenter\" @mouseleave=\"onStageMouseleave\" :config=\"configKonva\">\r\n                            <v-layer ref=\"layer\" @mouseover=\"onmouseover\" @mouseout=\"onmouseout\">\r\n                                <v-rect v-for=\"(x, k) in items\" :key=\"k\" :config=\"x\" @dragstart=\"handleDragstart\"\r\n                                    @dragend=\"handleDragend\" />\r\n                                    \r\n                                <v-circle ref=\"circle\"></v-circle>\r\n                                <v-rect ref=\"rect\"></v-rect>\r\n                                <v-image ref=\"img\"></v-image>\r\n\r\n                                <v-shape ref=\"custom\" :config=\"{\r\n                                    sceneFunc: (context, shape) => {\r\n                                        let w = 260;\r\n                                        let h = 170;\r\n                                        context.beginPath();\r\n                                        //context.rect(0, 0, w, h);\r\n                                        context.moveTo(20, 50);\r\n                                        context.lineTo(220, 80);\r\n                                        context.quadraticCurveTo(150, 100, 260, 170);\r\n                                        context.closePath();\r\n                                        context.fillStrokeShape(shape);\r\n                                    },\r\n                                    fill: '#00D2FF',\r\n                                    stroke: 'black',\r\n                                    strokeWidth: 4,\r\n                                    draggable: true,\r\n                                    width: 260,\r\n                                    height: 170\r\n                                }\" />\r\n\r\n                                <v-text :config=\"{\r\n                                    id:'thuc-1000',\r\n                                    x: 15,//stage.width() / 2,\r\n                                    y: 15,\r\n                                    text: 'Thá»©c 101',\r\n                                    fontSize: 80,\r\n                                    fontFamily: 'Tahoma',//'Calibri',\r\n                                    fill: 'green',\r\n                                    padding: 20,\r\n                                    align: 'center',\r\n                                    draggable:true,\r\n                                }\" />\r\n\r\n                                <!-- <v-cursor cursor=\"pointer\"/> -->\r\n                                <v-transformer ref=\"transformer\" :config=\"{\r\n                                    anchorStroke: 'red',\r\n                                    anchorFill: 'yellow',\r\n                                    anchorSize: 8,\r\n                                    borderStroke: 'green',\r\n                                    borderDash: [3, 3],\r\n                                }\" />\r\n\r\n                            </v-layer>\r\n                        </v-stage>\r\n                    </div>\r\n                </div>\r\n                <button class=\"mt-1\" @click=\"onSave\">Save</button>\r\n            </b-col>\r\n            <b-col lg=\"8\">\r\n\r\n                <div class=\"d-flex align-content-start flex-wrap\">\r\n                    <div class=\"p-2 bd-highlight \" v-for=\"(x, k) in ds\" :key=\"k\">\r\n                        <img :src=\"x\" width=\"120\" height=\"90\" class=\"border\" />\r\n                    </div>\r\n                </div>\r\n\r\n            </b-col>\r\n        </b-row>\r\n    </div>\r\n</template>\r\n<script>\r\nvar sceneWidth = 1500;\r\nvar sceneHeight = 1000;\r\nvar stage = null;\r\nvar layer = null;\r\nfunction generateItems() {\r\n    let w = 200;\r\n    let h = 200;\r\n    let width = sceneWidth - w;\r\n    let height = sceneHeight - h;\r\n    const items = [];\r\n    for (let i = 0; i < 10; i++) {\r\n        items.push({\r\n            x: Math.random() * width,\r\n            y: Math.random() * height,\r\n            radius: 50,\r\n            id: \"node-\" + i,\r\n            width: w,\r\n            height: h,\r\n            fill: Konva.Util.getRandomColor(),\r\n            stroke: 'black', //Konva.Util.getRandomColor(),\r\n            draggable: true,\r\n            strokeWidth: 4,\r\n        });\r\n    }\r\n    return items;\r\n}\r\nexport default {\r\n    data() {\r\n        return {\r\n            configKonva: {\r\n                width: sceneWidth,\r\n                height: sceneHeight\r\n            },\r\n            items: [],\r\n            msg: '',\r\n            count: 0,\r\n            selId: -1,\r\n            ds: [],\r\n            image: null,\r\n        }\r\n    },\r\n    mounted() {\r\n        //this.items = generateItems();\r\n        this.$nextTick(function () {\r\n            layer = this.$refs.layer.getNode();\r\n            stage = this.$refs.stage.getNode();\r\n            window.addEventListener(\"resize\", this.fitStageIntoParentContainer);\r\n            this.fitStageIntoParentContainer();\r\n        })\r\n        const image = new window.Image();\r\n        image.src = \"/BoBien.jpg\";\r\n        image.onload = () => {\r\n            this.image = image;\r\n        };\r\n    },\r\n    watch: {\r\n        selId: function (newValue, oldValue) {\r\n            if (this.selId == -1) return;\r\n            this.clearTransformer();\r\n            this.addTransformer(this.getById(this.selId));\r\n        }\r\n    },\r\n    methods: {\r\n        onmouseover(e) {\r\n            const stage = e.target.getStage();\r\n            stage.container().style.cursor = 'pointer';\r\n        },\r\n        onmouseout(e) {\r\n            const stage = e.target.getStage();\r\n            stage.container().style.cursor = 'default';\r\n        },\r\n        clearTransformer() {\r\n            let stage = this.$refs.stage.getNode();\r\n            let trs = stage.find('.rectTransformer');\r\n            trs.forEach(x => {\r\n                x.destroy();\r\n            })\r\n        },\r\n        addTransformer(shape) {\r\n            let stage = this.$refs.stage.getNode();\r\n            const transformerNode = this.$refs.transformer.getNode().clone();\r\n            transformerNode.name('rectTransformer');\r\n            let layer = this.$refs.layer.getNode();\r\n            layer.add(transformerNode);\r\n            transformerNode.nodes([shape]);\r\n        },\r\n        shapeProperty(shape) {\r\n            let kq = {\r\n                x: shape.x(),\r\n                y: shape.y(),\r\n                width: shape.width(),\r\n                height: shape.height(),\r\n                scaleX: shape.scaleX(),\r\n                scaleY: shape.scaleY(),\r\n            }\r\n            return kq;\r\n        },\r\n        shapeSetFull(shape, sceneWidth, sceneHeight) {\r\n            shape.x(0);\r\n            shape.y(0);\r\n            shape.scaleX(1);\r\n            shape.scaleY(1);\r\n            shape.width(sceneWidth);\r\n            shape.height(sceneHeight);\r\n        },\r\n        onFull() {\r\n            let shape = this.getById(this.selId);\r\n            this.shapeSetFull(shape, sceneWidth, sceneHeight);\r\n            shape.moveToBottom();\r\n            this.msg = this.shapeProperty(shape);\r\n        },\r\n        getShapeName(shape) {\r\n            return shape.getAttr('shapename');\r\n        },\r\n        onClearSelect() {\r\n            this.clearTransformer();\r\n        },\r\n        onSave() {\r\n            let stage = this.$refs.stage.getNode();\r\n            var dataURL = stage.toDataURL({ pixelRatio: 0.5 });\r\n            //alert(dataURL);\r\n            this.ds.push(dataURL);\r\n        },\r\n        handleDragstart(e) {\r\n            e.target.moveToTop();\r\n        },\r\n        handleDragend(e) {\r\n            e.target.fill('yellow');\r\n        },\r\n        onStageClick(e) {\r\n            let p = this.myGetMouse();\r\n            let layer = this.$refs.layer.getNode();\r\n\r\n            if (e.target.id() == '') {\r\n                //let circle=this.makeCircle(this.getCount(),p.x,p.y,70);\r\n                //let circle=this.makeRect(this.getCount(),p.x,p.y,100,100);\r\n                let circle = this.makeImg(this.getCount(), p.x, p.y, 700, 500, this.image);\r\n                //let circle = this.makeCustom(this.getCount(), p.x, p.y);\r\n                layer.add(circle);\r\n            } else {\r\n                this.selId = e.target.id();\r\n            }\r\n        },\r\n        onStageMouseMove(e) {\r\n            let p = this.myGetMouse();\r\n        },\r\n        onStageMouseenter(e) {\r\n        },\r\n        onStageMouseleave(e) {\r\n        },\r\n        getCount() {\r\n            let kq = this.count;\r\n            this.count++;\r\n            return kq;\r\n        },\r\n        makeCircle(id, x, y, radius) {\r\n            let circle = this.$refs.circle.getNode().clone();\r\n            circle.id(id.toString());\r\n            circle.x(x);\r\n            circle.y(y);\r\n            circle.radius(radius);\r\n            circle.draggable(true);\r\n            circle.fill(Konva.Util.getRandomColor());\r\n            circle.stroke('blue');\r\n            circle.setAttr(\"shapename\", 'circle');\r\n            return circle;\r\n        },\r\n        makeRect(id, x, y, w, h) {\r\n            let circle = this.$refs.rect.getNode().clone();\r\n            circle.id(id.toString());\r\n            circle.x(x);\r\n            circle.y(y);\r\n            circle.width(w);\r\n            circle.height(h);\r\n            circle.draggable(true);\r\n            circle.fill(Konva.Util.getRandomColor());\r\n            circle.setAttr(\"shapename\", 'rect');\r\n            //circle.stroke('blue');\r\n            return circle;\r\n        },\r\n        makeImg(id, x, y, w, h, image) {\r\n            let circle = this.$refs.img.getNode().clone();\r\n            circle.id(id.toString());\r\n            circle.x(x);\r\n            circle.y(y);\r\n            circle.width(w);\r\n            circle.height(h);\r\n            circle.image(image);\r\n            circle.draggable(true);\r\n            circle.setAttr(\"shapename\", 'img');\r\n            return circle;\r\n        },\r\n        makeCustom(id, x, y) {\r\n            let circle = this.$refs.custom.getNode().clone();\r\n            circle.id(id.toString());\r\n            circle.x(x);\r\n            circle.y(y);\r\n            return circle;\r\n        },\r\n        myGetMouse() {\r\n            let scale = stage.scale().x;\r\n            var mousePos = stage.getPointerPosition();\r\n            var x = mousePos.x;\r\n            var y = mousePos.y;\r\n            var xx = Math.round(x / scale);\r\n            var yy = Math.round(y / scale);\r\n            return { x: xx, y: yy };\r\n        },\r\n        fitStageIntoParentContainer() {\r\n            var container = document.querySelector('#stage-parent');\r\n            var containerWidth = container.offsetWidth;\r\n            var scale = containerWidth / sceneWidth;\r\n            stage.width(sceneWidth * scale);\r\n            stage.height(sceneHeight * scale);\r\n            stage.scale({ x: scale, y: scale });\r\n            this.configKonva.width = sceneWidth * scale;\r\n            this.configKonva.height = sceneHeight * scale;\r\n        },\r\n        getById(id) {\r\n            let layer = this.$refs.layer.getNode();\r\n            return layer.find(`#${id}`)[0]\r\n        },\r\n    }\r\n}\r\n</script>\r\n  ","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Tpl2SaveImg.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Tpl2SaveImg.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Tpl2SaveImg.vue?vue&type=template&id=4096c1a6&\"\nimport script from \"./Tpl2SaveImg.vue?vue&type=script&lang=js&\"\nexport * from \"./Tpl2SaveImg.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","export default \"<template>\\r\\n    <div>\\r\\n        <raw-loader :mytxt=\\\"require('!raw-loader!./Tpl2SaveImg.vue').default\\\"></raw-loader>\\r\\n        <h1 class=\\\"border-bottom\\\">KonvaTpl2</h1>\\r\\n        {{ msg }}<br>\\r\\n        {{ selId }}<br>\\r\\n        <b-row>\\r\\n            <b-col lg=\\\"4\\\">\\r\\n                <div class=\\\"mb-1\\\">\\r\\n                    <button class=\\\"mr-1\\\" @click=\\\"onClearSelect\\\">Clear Select</button>\\r\\n                    <button class=\\\"mr-1\\\" :disabled=\\\"selId == -1\\\" @click=\\\"onFull\\\">Full</button>\\r\\n                </div>\\r\\n                <div id=\\\"stage-parent\\\">\\r\\n                    <div id=\\\"container\\\" class=\\\"border\\\">\\r\\n                        <v-stage ref=\\\"stage\\\" @click=\\\"onStageClick\\\" @mousemove=\\\"onStageMouseMove\\\"\\r\\n                            @mouseenter=\\\"onStageMouseenter\\\" @mouseleave=\\\"onStageMouseleave\\\" :config=\\\"configKonva\\\">\\r\\n                            <v-layer ref=\\\"layer\\\" @mouseover=\\\"onmouseover\\\" @mouseout=\\\"onmouseout\\\">\\r\\n                                <v-rect v-for=\\\"(x, k) in items\\\" :key=\\\"k\\\" :config=\\\"x\\\" @dragstart=\\\"handleDragstart\\\"\\r\\n                                    @dragend=\\\"handleDragend\\\" />\\r\\n                                    \\r\\n                                <v-circle ref=\\\"circle\\\"></v-circle>\\r\\n                                <v-rect ref=\\\"rect\\\"></v-rect>\\r\\n                                <v-image ref=\\\"img\\\"></v-image>\\r\\n\\r\\n                                <v-shape ref=\\\"custom\\\" :config=\\\"{\\r\\n                                    sceneFunc: (context, shape) => {\\r\\n                                        let w = 260;\\r\\n                                        let h = 170;\\r\\n                                        context.beginPath();\\r\\n                                        //context.rect(0, 0, w, h);\\r\\n                                        context.moveTo(20, 50);\\r\\n                                        context.lineTo(220, 80);\\r\\n                                        context.quadraticCurveTo(150, 100, 260, 170);\\r\\n                                        context.closePath();\\r\\n                                        context.fillStrokeShape(shape);\\r\\n                                    },\\r\\n                                    fill: '#00D2FF',\\r\\n                                    stroke: 'black',\\r\\n                                    strokeWidth: 4,\\r\\n                                    draggable: true,\\r\\n                                    width: 260,\\r\\n                                    height: 170\\r\\n                                }\\\" />\\r\\n\\r\\n                                <v-text :config=\\\"{\\r\\n                                    id:'thuc-1000',\\r\\n                                    x: 15,//stage.width() / 2,\\r\\n                                    y: 15,\\r\\n                                    text: 'Thá»©c 101',\\r\\n                                    fontSize: 80,\\r\\n                                    fontFamily: 'Tahoma',//'Calibri',\\r\\n                                    fill: 'green',\\r\\n                                    padding: 20,\\r\\n                                    align: 'center',\\r\\n                                    draggable:true,\\r\\n                                }\\\" />\\r\\n\\r\\n                                <!-- <v-cursor cursor=\\\"pointer\\\"/> -->\\r\\n                                <v-transformer ref=\\\"transformer\\\" :config=\\\"{\\r\\n                                    anchorStroke: 'red',\\r\\n                                    anchorFill: 'yellow',\\r\\n                                    anchorSize: 8,\\r\\n                                    borderStroke: 'green',\\r\\n                                    borderDash: [3, 3],\\r\\n                                }\\\" />\\r\\n\\r\\n                            </v-layer>\\r\\n                        </v-stage>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <button class=\\\"mt-1\\\" @click=\\\"onSave\\\">Save</button>\\r\\n            </b-col>\\r\\n            <b-col lg=\\\"8\\\">\\r\\n\\r\\n                <div class=\\\"d-flex align-content-start flex-wrap\\\">\\r\\n                    <div class=\\\"p-2 bd-highlight \\\" v-for=\\\"(x, k) in ds\\\" :key=\\\"k\\\">\\r\\n                        <img :src=\\\"x\\\" width=\\\"120\\\" height=\\\"90\\\" class=\\\"border\\\" />\\r\\n                    </div>\\r\\n                </div>\\r\\n\\r\\n            </b-col>\\r\\n        </b-row>\\r\\n    </div>\\r\\n</template>\\r\\n<script>\\r\\nvar sceneWidth = 1500;\\r\\nvar sceneHeight = 1000;\\r\\nvar stage = null;\\r\\nvar layer = null;\\r\\nfunction generateItems() {\\r\\n    let w = 200;\\r\\n    let h = 200;\\r\\n    let width = sceneWidth - w;\\r\\n    let height = sceneHeight - h;\\r\\n    const items = [];\\r\\n    for (let i = 0; i < 10; i++) {\\r\\n        items.push({\\r\\n            x: Math.random() * width,\\r\\n            y: Math.random() * height,\\r\\n            radius: 50,\\r\\n            id: \\\"node-\\\" + i,\\r\\n            width: w,\\r\\n            height: h,\\r\\n            fill: Konva.Util.getRandomColor(),\\r\\n            stroke: 'black', //Konva.Util.getRandomColor(),\\r\\n            draggable: true,\\r\\n            strokeWidth: 4,\\r\\n        });\\r\\n    }\\r\\n    return items;\\r\\n}\\r\\nexport default {\\r\\n    data() {\\r\\n        return {\\r\\n            configKonva: {\\r\\n                width: sceneWidth,\\r\\n                height: sceneHeight\\r\\n            },\\r\\n            items: [],\\r\\n            msg: '',\\r\\n            count: 0,\\r\\n            selId: -1,\\r\\n            ds: [],\\r\\n            image: null,\\r\\n        }\\r\\n    },\\r\\n    mounted() {\\r\\n        //this.items = generateItems();\\r\\n        this.$nextTick(function () {\\r\\n            layer = this.$refs.layer.getNode();\\r\\n            stage = this.$refs.stage.getNode();\\r\\n            window.addEventListener(\\\"resize\\\", this.fitStageIntoParentContainer);\\r\\n            this.fitStageIntoParentContainer();\\r\\n        })\\r\\n        const image = new window.Image();\\r\\n        image.src = \\\"/BoBien.jpg\\\";\\r\\n        image.onload = () => {\\r\\n            this.image = image;\\r\\n        };\\r\\n    },\\r\\n    watch: {\\r\\n        selId: function (newValue, oldValue) {\\r\\n            if (this.selId == -1) return;\\r\\n            this.clearTransformer();\\r\\n            this.addTransformer(this.getById(this.selId));\\r\\n        }\\r\\n    },\\r\\n    methods: {\\r\\n        onmouseover(e) {\\r\\n            const stage = e.target.getStage();\\r\\n            stage.container().style.cursor = 'pointer';\\r\\n        },\\r\\n        onmouseout(e) {\\r\\n            const stage = e.target.getStage();\\r\\n            stage.container().style.cursor = 'default';\\r\\n        },\\r\\n        clearTransformer() {\\r\\n            let stage = this.$refs.stage.getNode();\\r\\n            let trs = stage.find('.rectTransformer');\\r\\n            trs.forEach(x => {\\r\\n                x.destroy();\\r\\n            })\\r\\n        },\\r\\n        addTransformer(shape) {\\r\\n            let stage = this.$refs.stage.getNode();\\r\\n            const transformerNode = this.$refs.transformer.getNode().clone();\\r\\n            transformerNode.name('rectTransformer');\\r\\n            let layer = this.$refs.layer.getNode();\\r\\n            layer.add(transformerNode);\\r\\n            transformerNode.nodes([shape]);\\r\\n        },\\r\\n        shapeProperty(shape) {\\r\\n            let kq = {\\r\\n                x: shape.x(),\\r\\n                y: shape.y(),\\r\\n                width: shape.width(),\\r\\n                height: shape.height(),\\r\\n                scaleX: shape.scaleX(),\\r\\n                scaleY: shape.scaleY(),\\r\\n            }\\r\\n            return kq;\\r\\n        },\\r\\n        shapeSetFull(shape, sceneWidth, sceneHeight) {\\r\\n            shape.x(0);\\r\\n            shape.y(0);\\r\\n            shape.scaleX(1);\\r\\n            shape.scaleY(1);\\r\\n            shape.width(sceneWidth);\\r\\n            shape.height(sceneHeight);\\r\\n        },\\r\\n        onFull() {\\r\\n            let shape = this.getById(this.selId);\\r\\n            this.shapeSetFull(shape, sceneWidth, sceneHeight);\\r\\n            shape.moveToBottom();\\r\\n            this.msg = this.shapeProperty(shape);\\r\\n        },\\r\\n        getShapeName(shape) {\\r\\n            return shape.getAttr('shapename');\\r\\n        },\\r\\n        onClearSelect() {\\r\\n            this.clearTransformer();\\r\\n        },\\r\\n        onSave() {\\r\\n            let stage = this.$refs.stage.getNode();\\r\\n            var dataURL = stage.toDataURL({ pixelRatio: 0.5 });\\r\\n            //alert(dataURL);\\r\\n            this.ds.push(dataURL);\\r\\n        },\\r\\n        handleDragstart(e) {\\r\\n            e.target.moveToTop();\\r\\n        },\\r\\n        handleDragend(e) {\\r\\n            e.target.fill('yellow');\\r\\n        },\\r\\n        onStageClick(e) {\\r\\n            let p = this.myGetMouse();\\r\\n            let layer = this.$refs.layer.getNode();\\r\\n\\r\\n            if (e.target.id() == '') {\\r\\n                //let circle=this.makeCircle(this.getCount(),p.x,p.y,70);\\r\\n                //let circle=this.makeRect(this.getCount(),p.x,p.y,100,100);\\r\\n                let circle = this.makeImg(this.getCount(), p.x, p.y, 700, 500, this.image);\\r\\n                //let circle = this.makeCustom(this.getCount(), p.x, p.y);\\r\\n                layer.add(circle);\\r\\n            } else {\\r\\n                this.selId = e.target.id();\\r\\n            }\\r\\n        },\\r\\n        onStageMouseMove(e) {\\r\\n            let p = this.myGetMouse();\\r\\n        },\\r\\n        onStageMouseenter(e) {\\r\\n        },\\r\\n        onStageMouseleave(e) {\\r\\n        },\\r\\n        getCount() {\\r\\n            let kq = this.count;\\r\\n            this.count++;\\r\\n            return kq;\\r\\n        },\\r\\n        makeCircle(id, x, y, radius) {\\r\\n            let circle = this.$refs.circle.getNode().clone();\\r\\n            circle.id(id.toString());\\r\\n            circle.x(x);\\r\\n            circle.y(y);\\r\\n            circle.radius(radius);\\r\\n            circle.draggable(true);\\r\\n            circle.fill(Konva.Util.getRandomColor());\\r\\n            circle.stroke('blue');\\r\\n            circle.setAttr(\\\"shapename\\\", 'circle');\\r\\n            return circle;\\r\\n        },\\r\\n        makeRect(id, x, y, w, h) {\\r\\n            let circle = this.$refs.rect.getNode().clone();\\r\\n            circle.id(id.toString());\\r\\n            circle.x(x);\\r\\n            circle.y(y);\\r\\n            circle.width(w);\\r\\n            circle.height(h);\\r\\n            circle.draggable(true);\\r\\n            circle.fill(Konva.Util.getRandomColor());\\r\\n            circle.setAttr(\\\"shapename\\\", 'rect');\\r\\n            //circle.stroke('blue');\\r\\n            return circle;\\r\\n        },\\r\\n        makeImg(id, x, y, w, h, image) {\\r\\n            let circle = this.$refs.img.getNode().clone();\\r\\n            circle.id(id.toString());\\r\\n            circle.x(x);\\r\\n            circle.y(y);\\r\\n            circle.width(w);\\r\\n            circle.height(h);\\r\\n            circle.image(image);\\r\\n            circle.draggable(true);\\r\\n            circle.setAttr(\\\"shapename\\\", 'img');\\r\\n            return circle;\\r\\n        },\\r\\n        makeCustom(id, x, y) {\\r\\n            let circle = this.$refs.custom.getNode().clone();\\r\\n            circle.id(id.toString());\\r\\n            circle.x(x);\\r\\n            circle.y(y);\\r\\n            return circle;\\r\\n        },\\r\\n        myGetMouse() {\\r\\n            let scale = stage.scale().x;\\r\\n            var mousePos = stage.getPointerPosition();\\r\\n            var x = mousePos.x;\\r\\n            var y = mousePos.y;\\r\\n            var xx = Math.round(x / scale);\\r\\n            var yy = Math.round(y / scale);\\r\\n            return { x: xx, y: yy };\\r\\n        },\\r\\n        fitStageIntoParentContainer() {\\r\\n            var container = document.querySelector('#stage-parent');\\r\\n            var containerWidth = container.offsetWidth;\\r\\n            var scale = containerWidth / sceneWidth;\\r\\n            stage.width(sceneWidth * scale);\\r\\n            stage.height(sceneHeight * scale);\\r\\n            stage.scale({ x: scale, y: scale });\\r\\n            this.configKonva.width = sceneWidth * scale;\\r\\n            this.configKonva.height = sceneHeight * scale;\\r\\n        },\\r\\n        getById(id) {\\r\\n            let layer = this.$refs.layer.getNode();\\r\\n            return layer.find(`#${id}`)[0]\\r\\n        },\\r\\n    }\\r\\n}\\r\\n</script>\\r\\n  \";"],"names":["render","_vm","this","_c","_self","attrs","require","staticClass","_v","_s","msg","selId","on","onClearSelect","onFull","ref","configKonva","onStageClick","onStageMouseMove","onStageMouseenter","onStageMouseleave","onmouseover","onmouseout","_l","items","x","k","key","handleDragstart","handleDragend","sceneFunc","context","shape","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fillStrokeShape","fill","stroke","strokeWidth","draggable","width","height","id","y","text","fontSize","fontFamily","padding","align","anchorStroke","anchorFill","anchorSize","borderStroke","borderDash","onSave","ds","staticRenderFns","sceneWidth","sceneHeight","stage","data","count","image","mounted","layer","window","watch","methods","clearTransformer","trs","addTransformer","transformerNode","shapeProperty","scaleX","scaleY","shapeSetFull","getShapeName","pixelRatio","e","getCount","makeCircle","circle","makeRect","makeImg","makeCustom","myGetMouse","fitStageIntoParentContainer","getById","component"],"sourceRoot":""}